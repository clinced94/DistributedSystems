
==================== FINAL INTERFACE ====================
2016-11-09 21:57:03.741863 UTC

interface main@main:Main 8001
  interface hash: 4e2072ed3b3d3ac8e938b8f7392b2674
  ABI hash: 988ad3c4b6599b61aeb2788036881d15
  export-list hash: 42302d9a53fb4e3ce591b23cc542e33a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 043f291b65265bd3f5476371cbd1cd6f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.decSocketCount
  Main.endThread
  Main.handleMessage
  Main.incSocketCount
  Main.initSocket
  Main.main
  Main.receiveMessage
  Main.server
  Main.serverLoop
  Main.startswith
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Control.Concurrent 98a3a12a2ace3d27758947d9f1041f90
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Bool fdecca24596e58d69d3776148d262f25
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.String 69bb34ee5f2f4d95a41479e62b8fdc61
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Conc.Sync 800ad52ae188c67fd514a07ba8a64fcc
import  -/  base-4.9.0.0:GHC.MVar 5a1706a0bf7a7186672dad8d28229b31
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 6aef0058c6bf280aaddfe6ef70d5f28b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket 16daba302e6d1376ace8d6bc8354708f
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.ByteString 0651e1723028c296375d19eb3a5afe69
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.Types c045bc4119b787ed28c457fa81ec4a37
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
eb697d6d9c0493b671ef8940f89ab7f4
  $wreceiveMessage ::
    Foreign.C.Types.CInt
    -> GHC.MVar.MVar Network.Socket.Types.SocketStatus
    -> GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U(U)><L,1*U(U)><L,1*U(U)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Foreign.C.Types.CInt)
                   (ww1 :: GHC.MVar.MVar Network.Socket.Types.SocketStatus)
                   (w :: GHC.MVar.MVar GHC.Types.Int)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        2048#
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv3
                 } in
                 let {
                   ptr1 :: GHC.Ptr.Ptr GHC.Word.Word8 {- Strictness: m -}
                   = GHC.Ptr.Ptr @ GHC.Word.Word8 ptr
                 } in
                 case Network.Socket.$wrecvBuf
                        ww
                        ptr1
                        2048#
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Foreign.C.String.peekCStringLen1
                        (ptr1
                           `cast`
                         (GHC.Ptr.Ptr <GHC.Word.Word8, Foreign.C.Types.CChar>)_R,
                         ipv5)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepUnlifted
                        @ GHC.Prim.ByteArray#
                        ipv3
                        ipv6 of s4 { DEFAULT ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString# "Message: "# ipv7)
                        GHC.Types.True
                        s4 of ds7 { (#,#) ipv11 ipv12 ->
                 Main.handleMessage1
                   (Network.Socket.Types.MkSocket
                      ww
                      Main.receiveMessage4
                      Main.receiveMessage3
                      Main.receiveMessage2
                      ww1)
                   ipv7
                   w
                   ipv11 } } } } } }) -}
c67b63d38ead3549c7fd95ab0154d12f
  $wserver ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U(U)><L,U><L,U><L,U(U)><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Foreign.C.Types.CInt)
                   (ww1 :: Network.Socket.Types.Family)
                   (ww2 :: Network.Socket.Types.SocketType)
                   (ww3 :: Network.Socket.Types.ProtocolNumber)
                   (ww4 :: GHC.Prim.MVar#
                             GHC.Prim.RealWorld Network.Socket.Types.SocketStatus)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$wlisten
                        ww
                        ww4
                        Main.main3
                        w of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        ipv of ds { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        ipv3
                        Main.main3
                        ipv2 of s2# { DEFAULT ->
                 Main.$wserverLoop
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   (GHC.MVar.MVar @ GHC.Types.Int ipv3)
                   s2# } } }) -}
4e3fa5f1917eb735d7379309cd3997b0
  $wserverLoop ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><L,1*U(U)><S,U>,
     Inline: [0] -}
6e1df4bbcca6b81acfabdfdca0921b72
  decSocketCount :: GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.decSocketCount1
                  `cast`
                (<GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2afc240a36e2cf41c0e3418a0cc0ce5d
  decSocketCount1 ::
    GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case count of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        (case ipv1 of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.-# x 1#) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
51310d4707100546f95ac4e3b2584c27
  endThread ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.endThread1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bc9f07f4dbe903ba97758483b044d57a
  endThread1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (s :: Network.Socket.Types.Socket)
                   (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wclose ww1 ww7 eta of ds1 { (#,#) ipv ipv1 ->
                 Main.endThread2 count ipv } } }) -}
d81a3b485388a13443a60124728f102e
  endThread2 ::
    GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case count of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        (case ipv1 of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1#) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
a8787df4768e5b0db3195b4e58366e46
  handleMessage ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.MVar.MVar GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,1*U(U))><S,U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleMessage1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
28edd2af87a020189f026bb4ad96c476
  handleMessage1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,1*U(U))><S,U><L,1*U(U)><S,U>,
     Unfolding: (\ (s :: Network.Socket.Types.Socket)
                   (msg :: GHC.Base.String)
                   (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.startswith msg Main.handleMessage3 of wild {
                   GHC.Types.False
                   -> case Main.startswith msg Main.handleMessage2 of wild1 {
                        GHC.Types.False -> (# eta, GHC.Tuple.() #)
                        GHC.Types.True -> Main.endThread1 s count eta }
                   GHC.Types.True
                   -> case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                      case GHC.List.$wlenAcc @ GHC.Types.Char msg 0# of ww7 { DEFAULT ->
                      case Data.ByteString.Internal.$wunsafePackLenChars
                             ww7
                             msg of ww6 { Data.ByteString.Internal.PS ww8 ww9 ww10 ww11 ->
                      case Network.Socket.ByteString.$wsend
                             ww1
                             ww8
                             ww9
                             ww10
                             ww11
                             eta of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, GHC.Tuple.() #) } } } } }) -}
a02605c6d1a417037ff515a773fb73be
  handleMessage2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "KILL_SERVICE"#) -}
712e5bfdb4ed0a419d4e80d0ced0d965
  handleMessage3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HELO text"#) -}
d860625c301cb2ce4881c65821fb5c90
  incSocketCount :: GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.endThread2
                  `cast`
                (<GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
fbdba0b504704e1a40e53ba0908f55f5
  initSocket :: GHC.Types.IO Network.Socket.Types.Socket
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.initSocket1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <Network.Socket.Types.Socket>_R)) -}
7b8e32f59e3d5e2dec698327efd2f593
  initSocket1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$wsocket
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Network.Socket.getSocketOption3
                        Network.Socket.setSocketOption2
                        Network.Socket.ReuseAddr
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) level opt ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        4#
                        4#
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 let {
                   ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv7
                 } in
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        ptr
                        0#
                        1#
                        ipv6 of s2 { DEFAULT ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds { GHC.Int.I32# ds5 ->
                 case level
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds6 { GHC.Int.I32# ds7 ->
                 case opt
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds8 { GHC.Int.I32# ds9 ->
                 case {__pkg_ccall network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG setsockopt GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Addr#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           GHC.Prim.Int# #)}
                        ds5
                        ds7
                        ds9
                        ptr
                        4#
                        s2 of wild2 { (#,#) ds10 ds11 ->
                 case GHC.Prim.narrow32Int# ds11 of wild3 {
                   DEFAULT
                   -> case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ds10 of s4 { DEFAULT ->
                      case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                      case Network.Socket.$wbind
                             ds `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                             ww7
                             Main.initSocket2
                             s4 of ds12 { (#,#) ipv8 ipv9 ->
                      (# ipv8, ww #) } } }
                   -1#
                   -> case Foreign.C.Error.throwErrno1
                             @ Foreign.C.Types.CInt
                             Network.Socket.setSocketOption2
                             ds10 of ds12 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ipv8 of s4 { DEFAULT ->
                      case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                      case Network.Socket.$wbind
                             ds `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                             ww7
                             Main.initSocket2
                             s4 of ds13 { (#,#) ipv10 ipv11 ->
                      (# ipv10, ww #) } } } } } } } } } } } } } } } }) -}
26df711245224da656f2704dad120775
  initSocket2 :: Network.Socket.Types.SockAddr
  {- Strictness: m1,
     Unfolding: (Network.Socket.Types.SockAddrInet
                   Main.initSocket3
                   Network.Socket.iNADDR_ANY) -}
f392356134715327f444341b590f7aeb
  initSocket3 :: Network.Socket.Types.PortNumber
  {- Unfolding: (case {__pkg_ccall network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG htons GHC.Prim.Word#
                                                                                                -> GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld
                                                                                                -> (# GHC.Prim.State#
                                                                                                        GHC.Prim.RealWorld,
                                                                                                      GHC.Prim.Word# #)}
                        7000##
                        GHC.Prim.realWorld# of wild1 { (#,#) ds ds1 ->
                 (GHC.Word.W16# (GHC.Prim.narrow16Word# ds1))
                   `cast`
                 (Sym (Network.Socket.Types.N:PortNumber[0])) }) -}
20413cae079d5a097d1beb46ba14a513
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
478c2ffbd4e9d20fb3d2938f7fea7ac6
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$wsocket
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Network.Socket.getSocketOption3
                        Network.Socket.setSocketOption2
                        Network.Socket.ReuseAddr
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) level opt ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        4#
                        4#
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 let {
                   ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv7
                 } in
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        ptr
                        0#
                        1#
                        ipv6 of s2 { DEFAULT ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds { GHC.Int.I32# ds5 ->
                 case level
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds6 { GHC.Int.I32# ds7 ->
                 case opt
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds8 { GHC.Int.I32# ds9 ->
                 case {__pkg_ccall network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG setsockopt GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Addr#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           GHC.Prim.Int# #)}
                        ds5
                        ds7
                        ds9
                        ptr
                        4#
                        s2 of wild2 { (#,#) ds10 ds11 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                     case Network.Socket.$wbind
                            ds `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                            ww7
                            Main.initSocket2
                            w of ds12 { (#,#) ipv8 ipv9 ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            Main.main4
                            GHC.Types.True
                            ipv8 of ds13 { (#,#) ipv10 ipv11 ->
                     case GHC.Prim.fork#
                            @ (GHC.Types.IO ())
                            (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             GHC.Prim.catch#
                               @ ()
                               @ GHC.Exception.SomeException
                               (\ (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                Main.$wserver
                                  ds `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                                  ww2
                                  ww3
                                  ww4
                                  ww7
                                  w1)
                               GHC.Conc.Sync.childHandler1
                               eta)
                              `cast`
                            (Sym (GHC.Types.N:IO[0] <()>_R))
                            ipv10 of ds14 { (#,#) ipv12 ipv13 ->
                     GHC.IO.Handle.Text.hPutStr2
                       GHC.IO.Handle.FD.stdout
                       Main.main2
                       GHC.Types.True
                       ipv12 } } } }
                 } in
                 case GHC.Prim.narrow32Int# ds11 of wild3 {
                   DEFAULT
                   -> case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ds10 of s4 { DEFAULT ->
                      $w$j s4 }
                   -1#
                   -> case Foreign.C.Error.throwErrno1
                             @ Foreign.C.Types.CInt
                             Network.Socket.setSocketOption2
                             ds10 of ds12 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ipv8 of s4 { DEFAULT ->
                      $w$j s4 } } } } } } } } } } } } } }) -}
bd1488d92e21b94cd5f892f31a4348d0
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Terminating server"#) -}
f5a3368e25b27efba1fc5b1a427af658
  main3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
33bda2c80f350d1b21d958359e1bd039
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Starting server..."#) -}
293b39d1eb92c252a16316c6853c82dd
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
3cc0da863784fcd99005b90be503bc9f
  receiveMessage ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S,1*U(U(U),A,A,A,1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.receiveMessage1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
3e4a8a988a7461420744e61da86fe044
  receiveMessage1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,1*U(U(U),A,A,A,1*U(U))><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.MVar.MVar GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 Main.$wreceiveMessage ww1 ww5 w1 w2 }) -}
8dce0fd52523f8b071d87cd535bcb457
  receiveMessage2 :: Network.Socket.Types.ProtocolNumber
  {- Strictness: x -}
9ed77a3b871533c90a5be93ac9c76916
  receiveMessage3 :: Network.Socket.Types.SocketType
  {- Strictness: x -}
33184d55ef4a10bf97432bdc61b62cb6
  receiveMessage4 :: Network.Socket.Types.Family
  {- Strictness: x -}
173277144692b05c8ea3a8e37c870bc7
  server :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <S(LLLLS(S)),1*U(U(U),U,U,U(U),U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.server1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
96bbf2cc4e6eb752c2e533218527a52d
  server1 ::
    Network.Socket.Types.Socket
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <S(LLLLS(S)),1*U(U(U),U,U,U(U),U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wserver ww1 ww2 ww3 ww4 ww7 w1 } }) -}
b14d4e669670758b7e23ee4c28187ad2
  serverLoop ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.serverLoop1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b9981694284a064483e5ba0829372f9c
  serverLoop1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.MVar.MVar GHC.Types.Int)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wserverLoop ww1 ww2 ww3 ww4 ww7 w1 w2 } }) -}
397f6abfeefc13130b19f86c013f0dc9
  startswith :: GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

