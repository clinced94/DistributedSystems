
==================== FINAL INTERFACE ====================
2016-11-23 17:05:40.15316 UTC

interface main@main:Main 8001
  interface hash: ed0f764423c7b7dd6b095ad8dc2d031f
  ABI hash: 45cb0e470ce3d3d8c5dd9ca0dcddbeb7
  export-list hash: 658e80080cbb66869483c4cbf4ca5b77
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8668484c2415d15fbda37e3f0d670903
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.addClient
  Main.broadcastChat
  Main.broadcastJoin
  Main.broadcastLeave
  Main.broadcastPseudoLeave
  Main.chatToRoom
  Main.chatroomChatBroadcast
  Main.chatroomJoinBroadcast
  Main.chatroomLeaveBroadcast
  Main.chatroomPseudoLeaveBroadcast
  Main.clientJoinResponse
  Main.clientLeaveResponse
  Main.clientPseudoLeaveResponse
  Main.createChatroom
  Main.decSocketCount
  Main.disconnectClient
  Main.endThread
  Main.enterChatroom
  Main.findById
  Main.getChatMessageInfo
  Main.getChatroom
  Main.getChatroomByID
  Main.getClientByID
  Main.getClientID
  Main.getClientIP
  Main.getClientName
  Main.getClientPort
  Main.getClientSocket
  Main.getJoinMesgInfo
  Main.getLeaveMessageInfo
  Main.getNewId
  Main.getRoomClients
  Main.getRoomId
  Main.getRoomName
  Main.handleMessage
  Main.incSocketCount
  Main.initChatrooms
  Main.initForum
  Main.initSocket
  Main.insertChatroom
  Main.isRoomEmpty
  Main.leaveChatroom
  Main.main
  Main.newIdGenerator
  Main.printAllChatrooms
  Main.receiveMessage
  Main.removeClient
  Main.sendJoinResponse
  Main.sendLeaveResponse
  Main.sendPseudoLeaveResponse
  Main.sendToClient
  Main.server
  Main.serverLoop
  Main.Chatroom{Main.Chatroom}
  Main.Client{Main.Client}
  Main.Forum
  Main.ID
  Main.IDGenerator
  Main.IP
  Main.Name
  Main.Port
module dependencies:
package dependencies: ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI:System.Console.ANSI 1565f362ecfef470e206e8f337ab1f4d
import  -/  ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI:System.Console.ANSI.Common 24b0e5493e83ac3d41ce56ed4609c6c7
import  -/  ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-448ipfN5j28Ha0AgPiJmdI:System.Console.ANSI.Unix 27d28df4076211715f9e8c3aa4c39751
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Control.Concurrent 98a3a12a2ace3d27758947d9f1041f90
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Bool fdecca24596e58d69d3776148d262f25
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.String 69bb34ee5f2f4d95a41479e62b8fdc61
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Conc.Sync 800ad52ae188c67fd514a07ba8a64fcc
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.MVar 5a1706a0bf7a7186672dad8d28229b31
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 6aef0058c6bf280aaddfe6ef70d5f28b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket 16daba302e6d1376ace8d6bc8354708f
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.ByteString 0651e1723028c296375d19eb3a5afe69
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.Types c045bc4119b787ed28c457fa81ec4a37
d47635bcb0170eac49e866413414705a
  $fEqChatroom :: GHC.Classes.Eq Main.Chatroom
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Chatroom Main.$fEqChatroom_$c== Main.$fEqChatroom_$c/= -}
d47635bcb0170eac49e866413414705a
  $fEqChatroom_$c/= ::
    Main.Chatroom -> Main.Chatroom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Chatroom) (b :: Main.Chatroom) ->
                 case Main.$fEqChatroom_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d47635bcb0170eac49e866413414705a
  $fEqChatroom_$c== ::
    Main.Chatroom -> Main.Chatroom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Chatroom) (w1 :: Main.Chatroom) ->
                 case w of ww { Main.Chatroom ww1 ww2 ww3 ->
                 case w1 of ww4 { Main.Chatroom ww5 ww6 ww7 ->
                 Main.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
6eaca4b4f91f4bea3ed0c4d6d5bea0e6
  $fEqClient :: GHC.Classes.Eq Main.Client
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Client Main.$fEqClient_$c== Main.$fEqClient_$c/= -}
6eaca4b4f91f4bea3ed0c4d6d5bea0e6
  $fEqClient_$c/= :: Main.Client -> Main.Client -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U,1*U,1*U(A,A,A,A,1*U(U)),1*U(U))><S(SLLLL),1*U(1*U,1*U,1*U,1*U(A,A,A,A,1*U(U)),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Client) (b :: Main.Client) ->
                 case Main.$fEqClient_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6eaca4b4f91f4bea3ed0c4d6d5bea0e6
  $fEqClient_$c== :: Main.Client -> Main.Client -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U,1*U,1*U(A,A,A,A,1*U(U)),1*U(U))><S(SLLLL),1*U(1*U,1*U,1*U,1*U(A,A,A,A,1*U(U)),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Client) (w1 :: Main.Client) ->
                 case w of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ->
                 case w1 of ww6 { Main.Client ww7 ww8 ww9 ww10 ww11 ->
                 Main.$w$c==1 ww1 ww2 ww3 ww4 ww5 ww7 ww8 ww9 ww10 ww11 } }) -}
6eaca4b4f91f4bea3ed0c4d6d5bea0e6
  $fShowClient :: GHC.Show.Show Main.Client
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Client
                  Main.$fShowClient_$cshowsPrec
                  Main.$fShowClient_$cshow
                  Main.$fShowClient_$cshowList -}
6eaca4b4f91f4bea3ed0c4d6d5bea0e6
  $fShowClient1 :: Main.Client -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.Client) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 w1 }) -}
ed568fa3eddb7fe09d64f850e0b70b62
  $fShowClient2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Client "#) -}
6eaca4b4f91f4bea3ed0c4d6d5bea0e6
  $fShowClient_$cshow :: Main.Client -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U(1*U(U),A,A,A,A),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Client) ->
                 Main.$fShowClient_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6eaca4b4f91f4bea3ed0c4d6d5bea0e6
  $fShowClient_$cshowList :: [Main.Client] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Client
                   Main.$fShowClient1) -}
6eaca4b4f91f4bea3ed0c4d6d5bea0e6
  $fShowClient_$cshowsPrec ::
    GHC.Types.Int -> Main.Client -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U(1*U(U),A,A,A,A),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Client)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Client ww3 ww4 ww5 ww6 ww7 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 w2 } }) -}
e6b2067888617f9198ceed4027d11ad3
  $tc'Chatroom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17087822669908215985##
                   562869871650124454##
                   Main.$trModule
                   Main.$tc'Chatroom1) -}
debd9fb9c0c1d15e880f7bda7c6dec66
  $tc'Chatroom1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chatroom"#) -}
e62d791731323355b04c005ddd44e49e
  $tc'Client :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14317905627767584460##
                   8020356174247805466##
                   Main.$trModule
                   Main.$tc'Client1) -}
1e31cdcbef3d5a45efde6decabdcaefc
  $tc'Client1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Client"#) -}
e82f775f3735c5d968e088499db2465e
  $tcChatroom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9706153233630221117##
                   1865358357504204911##
                   Main.$trModule
                   Main.$tcChatroom1) -}
537933bca6f75e29999f47a72ba4594d
  $tcChatroom1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Chatroom"#) -}
824c8b6e5d1e111a64ffa02e17dfa0f0
  $tcClient :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2041806266336690928##
                   6211083142683335045##
                   Main.$trModule
                   Main.$tcClient1) -}
f6308ac30128598c150371405caec582
  $tcClient1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Client"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d2088b103842518d70271b03145df9d7
  $w$c== ::
    Main.Name
    -> [Main.Client]
    -> Main.ID
    -> Main.Name
    -> [Main.Client]
    -> Main.ID
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(U)><S,1*U><L,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Main.Name)
                   (ww1 :: [Main.Client])
                   (ww2 :: Main.ID)
                   (ww3 :: Main.Name)
                   (ww4 :: [Main.Client])
                   (ww5 :: Main.ID) ->
                 case GHC.Base.eqString ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Main.Client
                             Main.$fEqClient
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.eqInt ww2 ww5 } }) -}
4f0d7ff96f45f6c150c971ddb77e7aad
  $w$c==1 ::
    Main.IP
    -> Main.Port
    -> Main.Name
    -> Network.Socket.Types.Socket
    -> Main.ID
    -> Main.IP
    -> Main.Port
    -> Main.Name
    -> Network.Socket.Types.Socket
    -> Main.ID
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U(A,A,A,A,1*U(U))><L,1*U(U)><S,1*U><L,1*U><L,1*U><L,1*U(A,A,A,A,1*U(U))><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Main.IP)
                   (ww1 :: Main.Port)
                   (ww2 :: Main.Name)
                   (ww3 :: Network.Socket.Types.Socket)
                   (ww4 :: Main.ID)
                   (ww5 :: Main.IP)
                   (ww6 :: Main.Port)
                   (ww7 :: Main.Name)
                   (ww8 :: Network.Socket.Types.Socket)
                   (ww9 :: Main.ID) ->
                 case GHC.Base.eqString ww ww5 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Base.eqString ww1 ww6 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Base.eqString ww2 ww7 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww3 of wild3 { Network.Socket.Types.MkSocket ds2 ds3 ds4 ds5 m1 ->
                                case ww8 of wild4 { Network.Socket.Types.MkSocket ds6 ds7 ds8 ds9 m2 ->
                                case m1 of wild5 { GHC.MVar.MVar mvar1# ->
                                case m2 of wild6 { GHC.MVar.MVar mvar2# ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.sameMVar#
                                          @ GHC.Prim.RealWorld
                                          @ Network.Socket.Types.SocketStatus
                                          mvar1#
                                          mvar2#) of wild7 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> GHC.Classes.eqInt ww4 ww9 } } } } } } } }) -}
deca1d49cbbf203dace5749a855890db
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Main.IP
    -> Main.Port
    -> Main.Name
    -> Network.Socket.Types.Socket
    -> Main.ID
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 7,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U(1*U(U),A,A,A,A)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.IP)
                   (ww2 :: Main.Port)
                   (ww3 :: Main.Name)
                   (ww4 :: Network.Socket.Types.Socket)
                   (ww5 :: Main.ID)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Main.$fShowClient2
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.shows8
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows8
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows8
                                      (GHC.Show.showLitString
                                         ww2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.shows8
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showSpace1
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.shows8
                                                  (GHC.Show.showLitString
                                                     ww3
                                                     (GHC.Types.:
                                                        @ GHC.Types.Char
                                                        GHC.Show.shows8
                                                        (GHC.Types.:
                                                           @ GHC.Types.Char
                                                           GHC.Show.showSpace1
                                                           (case ww4 of ww6 { Network.Socket.Types.MkSocket ww7 ww8 ww9 ww10 ww11 ->
                                                            Network.Socket.Types.$w$cshowsPrec1
                                                              ww7
                                                              (GHC.Types.:
                                                                 @ GHC.Types.Char
                                                                 GHC.Show.showSpace1
                                                                 (case ww5 of ww12 { GHC.Types.I# ww13 ->
                                                                  case GHC.Show.$wshowSignedInt
                                                                         11#
                                                                         ww13
                                                                         x of ww14 { (#,#) ww15 ww16 ->
                                                                  GHC.Types.:
                                                                    @ GHC.Types.Char
                                                                    ww15
                                                                    ww16 } })) })))))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
13b77c1259116ae15762a6d053d64077
  $wbroadcastPseudoLeave ::
    GHC.Base.String
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U(1*U,1*U,1*U(U))><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: Main.Chatroom)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.broadcastLeave3
                        GHC.Types.True
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   broadcastMsg :: GHC.Base.String
                   = Main.$wchatroomPseudoLeaveBroadcast w w1
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        broadcastMsg
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case w1 of wild { Main.Chatroom ds clients ds3 ->
                 let {
                   lvl26 :: Data.ByteString.Internal.ByteString
                   = case GHC.List.$wlenAcc
                            @ GHC.Types.Char
                            broadcastMsg
                            0# of ww2 { DEFAULT ->
                     Data.ByteString.Internal.$wunsafePackLenChars ww2 broadcastMsg }
                 } in
                 letrec {
                   go :: [Main.Client]
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds4 :: [Main.Client])
                       (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds4 of wild1 {
                       [] -> (# eta, GHC.Tuple.() #)
                       : y ys
                       -> case y of wild2 { Main.Client ds5 ds6 ds7 sock ds8 ->
                          case sock of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                          case lvl26 of ww6 { Data.ByteString.Internal.PS ww7 ww8 ww9 ww10 ->
                          case Network.Socket.ByteString.$wsend
                                 ww1
                                 ww7
                                 ww8
                                 ww9
                                 ww10
                                 eta of ds9 { (#,#) ipv4 ipv5 ->
                          go ys ipv4 } } } } }
                 } in
                 case go clients ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.broadcastLeave2
                   GHC.Types.True
                   ipv4 } } } }) -}
e02e49622521399a497a7cfb30d8ca73
  $wchatToRoom ::
    GHC.Base.String
    -> Main.Forum
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String)
                   (w1 :: Main.Forum)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.chatToRoom13
                        GHC.Types.True
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case w1 of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        mvar#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   ds :: (GHC.Base.String, GHC.Base.String, GHC.Base.String,
                          GHC.Base.String)
                   = case Main.$wgetChatMessageInfo
                            w of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                     (ww1, ww2, ww3, ww4) }
                 } in
                 let {
                   roomId :: GHC.Base.String
                   = case ds of wild1 { (,,,) roomId1 clientId clientName message ->
                     roomId1 }
                 } in
                 case Main.chatToRoom12
                        (case Text.Read.readEither6
                                @ Main.ID
                                (Text.ParserCombinators.ReadP.run
                                   @ Main.ID
                                   Main.chatToRoom11
                                   roomId) of wild1 {
                           [] -> Main.chatToRoom10
                           : x ds3
                           -> case ds3 of wild2 { [] -> x : ipv4 ipv5 -> Main.chatToRoom9 } })
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ipv5 of wild1 {
                   GHC.Base.Nothing
                   -> case GHC.Prim.putMVar#
                             @ GHC.Prim.RealWorld
                             @ [GHC.MVar.MVar Main.Chatroom]
                             mvar#
                             ipv3
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) }
                   GHC.Base.Just ipv6
                   -> case ipv6 of wild2 { GHC.MVar.MVar mvar#1 ->
                      case GHC.Prim.takeMVar#
                             @ GHC.Prim.RealWorld
                             @ Main.Chatroom
                             mvar#1
                             ipv4 of ds4 { (#,#) ipv7 ipv8 ->
                      case ipv8 of wild3 { Main.Chatroom ds5 clients ds6 ->
                      case Main.getClientByID
                             (case Text.Read.readEither6
                                     @ Main.ID
                                     (Text.ParserCombinators.ReadP.run
                                        @ Main.ID
                                        Main.chatToRoom11
                                        (case ds of wild4 { (,,,) roomId1 clientId clientName message ->
                                         clientId })) of wild4 {
                                [] -> Main.chatToRoom10
                                : x ds7
                                -> case ds7 of wild5 {
                                     [] -> x : ipv9 ipv10 -> Main.chatToRoom9 } })
                             clients of wild4 {
                        GHC.Base.Nothing
                        -> case GHC.Prim.putMVar#
                                  @ GHC.Prim.RealWorld
                                  @ Main.Chatroom
                                  mvar#1
                                  wild3
                                  ipv7 of s2# { DEFAULT ->
                           case GHC.Prim.putMVar#
                                  @ GHC.Prim.RealWorld
                                  @ [GHC.MVar.MVar Main.Chatroom]
                                  mvar#
                                  ipv3
                                  s2# of s2#1 { DEFAULT ->
                           (# s2#1, GHC.Tuple.() #) } }
                        GHC.Base.Just ipv9
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.chatToRoom5
                                  GHC.Types.False
                                  ipv7 of ds7 { (#,#) ipv10 ipv11 ->
                           case Main.broadcastChat1
                                  roomId
                                  (case ds of wild5 { (,,,) roomId1 clientId clientName message ->
                                   clientName })
                                  (case ds of wild5 { (,,,) roomId1 clientId clientName message ->
                                   message })
                                  wild3
                                  ipv10 of ds8 { (#,#) ipv12 ipv13 ->
                           case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.chatToRoom2
                                  GHC.Types.False
                                  ipv12 of ds9 { (#,#) ipv14 ipv15 ->
                           case GHC.Prim.putMVar#
                                  @ GHC.Prim.RealWorld
                                  @ Main.Chatroom
                                  mvar#1
                                  (Main.Chatroom
                                     ds5
                                     (Data.OldList.\\
                                        @ Main.Client
                                        Main.$fEqClient
                                        clients
                                        (GHC.Types.:
                                           @ Main.Client
                                           ipv9
                                           (GHC.Types.[] @ Main.Client)))
                                     ds6)
                                  ipv14 of s2# { DEFAULT ->
                           case GHC.Prim.putMVar#
                                  @ GHC.Prim.RealWorld
                                  @ [GHC.MVar.MVar Main.Chatroom]
                                  mvar#
                                  ipv3
                                  s2# of s2#1 { DEFAULT ->
                           (# s2#1, GHC.Tuple.() #) } } } } } } } } } } } } } }) -}
06cb26675277adbce7f17f16b2fb7e78
  $wchatroomPseudoLeaveBroadcast ::
    GHC.Base.String -> Main.Chatroom -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,U><L,1*U(1*U,A,1*U(U))>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) (w1 :: Main.Chatroom) ->
                 GHC.CString.unpackAppendCString#
                   "CHAT:"#
                   (case w1 of wild { Main.Chatroom ds ds1 rmId ->
                    case rmId of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \CLIENT_NAME:"#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            w
                            (GHC.CString.unpackAppendCString#
                               "\n\
                               \MESSAGE:"#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  w
                                  (GHC.CString.unpackAppendCString#
                                     " has left "#
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        ds
                                        Main.chatroomLeaveBroadcast1)))))) } } })) -}
bb9495d32e6b75060fdab6480f690c2e
  $wcreateChatroom ::
    Main.Name
    -> GHC.Prim.MVar# GHC.Prim.RealWorld Main.ID
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.MVar.MVar Main.Chatroom #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Name)
                   (ww :: GHC.Prim.MVar# GHC.Prim.RealWorld Main.ID)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        ww
                        (case ipv1 of wild { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1#) })
                        ipv of s2# { DEFAULT ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        s2# of ds { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        ipv3
                        (Main.Chatroom w (GHC.Types.[] @ Main.Client) ipv1)
                        ipv2 of s2#1 { DEFAULT ->
                 (# s2#1, GHC.MVar.MVar @ Main.Chatroom ipv3 #) } } } }) -}
b30a1639f6f9aba8fe8ca1f7024c3e62
  $wfindById ::
    [Main.Client]
    -> GHC.Prim.Int#
    -> (# Main.IP, Main.Port, Main.Name, Network.Socket.Types.Socket,
          Main.ID #)
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
58787939cfa123ffaa0db11a552909e6
  $wgetChatMessageInfo ::
    GHC.Base.String
    -> (# GHC.Base.String, GHC.Base.String, GHC.Base.String,
          GHC.Base.String #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 let {
                   msgLines :: [GHC.Base.String] = Data.OldList.lines w
                 } in
                 (# Main.$wunsafeDrop3
                      @ GHC.Types.Char
                      6#
                      (GHC.List.$w!! @ GHC.Base.String msgLines 0#),
                    Main.$wunsafeDrop2
                      @ GHC.Types.Char
                      9#
                      (GHC.List.$w!! @ GHC.Base.String msgLines 1#),
                    Main.$wunsafeDrop1
                      @ GHC.Types.Char
                      13#
                      (GHC.List.$w!! @ GHC.Base.String msgLines 2#),
                    Main.$wunsafeDrop
                      @ GHC.Types.Char
                      9#
                      (GHC.List.$w!! @ GHC.Base.String msgLines 3#) #)) -}
d5e13a4d244da2c8eb5c2669e26462ef
  $wgetLeaveMessageInfo ::
    GHC.Base.String
    -> (# GHC.Base.String, GHC.Base.String, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 let {
                   msgLines :: [GHC.Base.String] = Data.OldList.lines w
                 } in
                 (# Main.$wunsafeDrop8
                      @ GHC.Types.Char
                      16#
                      (GHC.List.$w!! @ GHC.Base.String msgLines 0#),
                    Main.$wunsafeDrop7
                      @ GHC.Types.Char
                      9#
                      (GHC.List.$w!! @ GHC.Base.String msgLines 1#),
                    Main.$wunsafeDrop6
                      @ GHC.Types.Char
                      13#
                      (GHC.List.$w!! @ GHC.Base.String msgLines 2#) #)) -}
49b7a33358d3e7e21be1c0d55c0d0e81
  $wremoveClient ::
    Main.Client
    -> GHC.Prim.MVar# GHC.Prim.RealWorld Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Client)
                   (ww :: GHC.Prim.MVar# GHC.Prim.RealWorld Main.Chatroom)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Main.Chatroom name clients rmId ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        ww
                        (Main.Chatroom
                           name
                           (Data.OldList.\\
                              @ Main.Client
                              Main.$fEqClient
                              clients
                              (GHC.Types.: @ Main.Client w (GHC.Types.[] @ Main.Client)))
                           rmId)
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
8e93d69891d2bb08c7d0326ed76e9268
  $wsendToClient ::
    GHC.Prim.Int#
    -> Network.Socket.Types.Family
    -> Main.ID
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <S,U><S,1*U><L,1*U(U)><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Network.Socket.Types.Family)
                   (ww2 :: Main.ID)
                   (w :: GHC.Base.String)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$wgetPeerName
                        ww
                        ww1
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "Sending to client "#
                           (case ww2 of ww3 { GHC.Types.I# ww4 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww4
                                   (GHC.Types.[] @ GHC.Types.Char) of ww5 { (#,#) ww6 ww7 ->
                            GHC.Base.++
                              @ GHC.Types.Char
                              (GHC.Types.: @ GHC.Types.Char ww6 ww7)
                              (GHC.CString.unpackAppendCString#
                                 " ("#
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    (Network.Socket.$w$cshowsPrec3
                                       ipv1
                                       (GHC.Types.[] @ GHC.Types.Char))
                                    (GHC.CString.unpackAppendCString# ") :\n"# w))) } }))
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww3 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww3
                        w of ww6 { Data.ByteString.Internal.PS ww7 ww8 ww9 ww10 ->
                 case Network.Socket.ByteString.$wsend
                        (GHC.Int.I32# ww) `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                        ww7
                        ww8
                        ww9
                        ww10
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4, GHC.Tuple.() #) } } } } }) -}
7b30d4695a4b1af4530ac1747aee39e5
  $wserverLoop ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 11,
     Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Inline: [0] -}
a7fcd793b8606cac7211ca5df5b1d36e
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
f8aeca30cc0323802397450d786aa3a7
  $wunsafeDrop1 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
16db326310dd6991fd4dd9d5f0c31b76
  $wunsafeDrop2 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
88d558598e3a0fc2fee9844cdc2429d0
  $wunsafeDrop3 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
a3491b5d55189865020b65937aff88bc
  $wunsafeDrop4 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
ec1f78133b3d8efe48a502ab12718ad4
  $wunsafeDrop5 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
5a55ed3e57bda836f11d039fc8cbc76b
  $wunsafeDrop6 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
f7e0079269cdb1afca5b88df64b4a730
  $wunsafeDrop7 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
d29250004e17ffd4cd4119851fe6b8a0
  $wunsafeDrop8 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
d47635bcb0170eac49e866413414705a
  data Chatroom = Chatroom Main.Name [Main.Client] Main.ID
6eaca4b4f91f4bea3ed0c4d6d5bea0e6
  data Client
    = Client Main.IP
             Main.Port
             Main.Name
             Network.Socket.Types.Socket
             Main.ID
45dcd4f162da402ebd3fbac89a2a6905
  type Forum = GHC.MVar.MVar [GHC.MVar.MVar Main.Chatroom]
d06a83fac3980621c102c8d41a948683
  type ID = GHC.Types.Int
2f43c89c8c1f541029488f60a6bab3a9
  type IDGenerator = GHC.MVar.MVar Main.ID
c297ec72918f624e92baa0ea9e9bbb16
  type IP = GHC.Base.String
29b1c2467858e581962a498c6425c7cd
  type Name = GHC.Base.String
fc0d8b1c33010e75f44c76a1ba60f601
  type Port = GHC.Base.String
5a34d2c3719560b9b6a5647a33f2d4a6
  addClient ::
    Main.Client -> GHC.MVar.MVar Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.addClient1
                  `cast`
                (<Main.Client>_R
                 ->_R <GHC.MVar.MVar Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
0bc35b3fc1350ebee6915630b45e7f7d
  addClient1 ::
    Main.Client
    -> GHC.MVar.MVar Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (client :: Main.Client)
                   (room :: GHC.MVar.MVar Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case room of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild1 { Main.Chatroom name clients rmId ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        mvar#
                        (Main.Chatroom
                           name
                           (GHC.Base.augment
                              @ Main.Client
                              (\ @ b (c :: Main.Client -> b -> b)[OneShot] (n :: b)[OneShot] ->
                               GHC.Base.foldr @ Main.Client @ b c n clients)
                              (GHC.Types.: @ Main.Client client (GHC.Types.[] @ Main.Client)))
                           rmId)
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } } }) -}
a46cb2129058fc131841846d2b8c8e75
  broadcastChat ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U(A,1*U,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.broadcastChat1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e91215a7e942f72123b9628626914957
  broadcastChat1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U(A,1*U,A)><S,U>,
     Unfolding: (\ (roomId :: GHC.Base.String)
                   (clientName :: GHC.Base.String)
                   (message :: GHC.Base.String)
                   (ch :: Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.broadcastChat3
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ch of wild { Main.Chatroom ds clients ds2 ->
                 let {
                   chatMessage :: GHC.Base.String
                   = Main.chatroomChatBroadcast roomId clientName message
                 } in
                 letrec {
                   go :: [Main.Client]
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds3 :: [Main.Client])
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds3 of wild1 {
                       [] -> (# eta1, GHC.Tuple.() #)
                       : y ys
                       -> case y of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ->
                          case ww4 of ww6 { Network.Socket.Types.MkSocket ww7 ww8 ww9 ww10 ww11 ->
                          case ww7
                                 `cast`
                               (Foreign.C.Types.N:CInt[0]) of ww12 { GHC.Int.I32# ww13 ->
                          case Main.$wsendToClient
                                 ww13
                                 ww8
                                 ww5
                                 chatMessage
                                 eta1 of ds4 { (#,#) ipv2 ipv3 ->
                          go ys ipv2 } } } } }
                 } in
                 case go clients ipv of ds3 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.broadcastChat2
                   GHC.Types.True
                   ipv2 } } }) -}
0775d288d570047dd41319a15c7aa13c
  broadcastChat2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Chat Broadcast Sent!"#) -}
e372680b6c2b16ca8d340b34ea2ec4c1
  broadcastChat3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Broadcasting Chat"#) -}
04dae2946ca28a6ab1061329bd29069a
  broadcastJoin :: Main.Client -> Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,1*U(A,A,U,A,A)><L,1*U(A,U,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.broadcastJoin1
                  `cast`
                (<Main.Client>_R
                 ->_R <Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
3041234e1b726497687667310675efbd
  broadcastJoin1 ::
    Main.Client
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,U,A,A)><L,1*U(A,U,1*U(U))><S,U>,
     Unfolding: (\ (c :: Main.Client)
                   (ch :: Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.broadcastJoin4
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ch of wild { Main.Chatroom ds clients ds2 ->
                 case Main.broadcastJoin3 clients ipv of ds3 { (#,#) ipv2 ipv3 ->
                 let {
                   broadcastMsg :: GHC.Base.String = Main.chatroomJoinBroadcast c wild
                 } in
                 letrec {
                   go :: [Main.Client]
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds4 :: [Main.Client])
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds4 of wild1 {
                       [] -> (# eta1, GHC.Tuple.() #)
                       : y ys
                       -> case y of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ->
                          case ww4 of ww6 { Network.Socket.Types.MkSocket ww7 ww8 ww9 ww10 ww11 ->
                          case ww7
                                 `cast`
                               (Foreign.C.Types.N:CInt[0]) of ww12 { GHC.Int.I32# ww13 ->
                          case Main.$wsendToClient
                                 ww13
                                 ww8
                                 ww5
                                 broadcastMsg
                                 eta1 of ds5 { (#,#) ipv4 ipv5 ->
                          go ys ipv4 } } } } }
                 } in
                 case go clients ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.broadcastJoin2
                   GHC.Types.True
                   ipv4 } } } }) -}
6d90d30abfdbe575d178d8ca194e158b
  broadcastJoin2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Broadcast sent!"#) -}
6e8b8effab0be99c6fd6e9224e8064cb
  broadcastJoin3 ::
    [Main.Client]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
d2245ee941b85efb013f84d7237fc645
  broadcastJoin4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Broadcasting..."#) -}
586d1d0784fe38a9fe54b1438256e709
  broadcastLeave :: Main.Client -> Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,1*U(A,A,U,A,A)><L,U(1*U,1*U,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.broadcastLeave1
                  `cast`
                (<Main.Client>_R
                 ->_R <Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d337b61ef9e4fd8bef7ae8aec9e98416
  broadcastLeave1 ::
    Main.Client
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,U,A,A)><L,U(1*U,1*U,1*U(U))><S,U>,
     Unfolding: (\ (cl :: Main.Client)
                   (ch :: Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.broadcastLeave3
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 let {
                   broadcastMsg :: GHC.Base.String = Main.chatroomLeaveBroadcast cl ch
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        broadcastMsg
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ch of wild { Main.Chatroom ds clients ds3 ->
                 let {
                   lvl26 :: Data.ByteString.Internal.ByteString
                   = case GHC.List.$wlenAcc
                            @ GHC.Types.Char
                            broadcastMsg
                            0# of ww2 { DEFAULT ->
                     Data.ByteString.Internal.$wunsafePackLenChars ww2 broadcastMsg }
                 } in
                 letrec {
                   go :: [Main.Client]
                         -> GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds4 :: [Main.Client])
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds4 of wild1 {
                       [] -> (# eta1, GHC.Tuple.() #)
                       : y ys
                       -> case y of wild2 { Main.Client ds5 ds6 ds7 sock ds8 ->
                          case sock of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                          case lvl26 of ww6 { Data.ByteString.Internal.PS ww7 ww8 ww9 ww10 ->
                          case Network.Socket.ByteString.$wsend
                                 ww1
                                 ww7
                                 ww8
                                 ww9
                                 ww10
                                 eta1 of ds9 { (#,#) ipv4 ipv5 ->
                          go ys ipv4 } } } } }
                 } in
                 case go clients ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.broadcastLeave2
                   GHC.Types.True
                   ipv4 } } } }) -}
7ade19ce64f156abf1d8f2728fd3f4d3
  broadcastLeave2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Leave broadcast sent!"#) -}
17e89d84f1f77738cd780b3eb6d04344
  broadcastLeave3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Broadcasting leave:"#) -}
d177c08df383f62d7cb9d646da363176
  broadcastPseudoLeave ::
    GHC.Base.String
    -> GHC.Base.String -> Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,A><L,U><L,U(1*U,1*U,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.broadcastPseudoLeave1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f978bdb507340ee85b25ec4501e19fa8
  broadcastPseudoLeave1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,A><L,U><L,U(1*U,1*U,1*U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: Main.Chatroom)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wbroadcastPseudoLeave w1 w2 w3) -}
916ae869ee3102a10acd42544aa07895
  chatToRoom ::
    Network.Socket.Types.Socket
    -> GHC.Base.String -> Main.Forum -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,A><L,1*U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.chatToRoom1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e6f4ca47dd138cc8bf981fc50245c07e
  chatToRoom1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> Main.Forum
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,A><L,1*U><L,1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Base.String)
                   (w2 :: Main.Forum)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wchatToRoom w1 w2 w3) -}
56953915215071eb2207c57a213e7db3
  chatToRoom10 :: Main.ID
  {- Strictness: x -}
dec1ff03bce75006a7c92d2e58ce1e1d
  chatToRoom11 :: Text.ParserCombinators.ReadP.P Main.ID
  {- Unfolding: ((GHC.Read.$fReadInt3
                    GHC.Read.$fReadInt_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.ID>_R)
                   @ Main.ID
                   (Text.Read.readEither5 @ Main.ID)) -}
77c9526bf28d0b410b0c2c197954eab4
  chatToRoom12 ::
    Main.ID
    -> [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U><S,U> -}
00d566ed94dc6b4e2cf228fa7600d184
  chatToRoom13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Getting Chat Message Info"#) -}
bab62397ae18a1eb52e1f2308b9361aa
  chatToRoom2 :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Unix.csi
                   Main.chatToRoom3
                   System.Console.ANSI.Unix.setSGRCode1) -}
a42ce11be3f54586b659ac839dfb9476
  chatToRoom3 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.chatToRoom4
                   (GHC.Types.[] @ GHC.Types.Int)) -}
3f040ee6b0030ba20a6c1fc26fc7df99
  chatToRoom4 :: GHC.Types.Int
  {- Unfolding: (case System.Console.ANSI.Unix.$wsgrToCode
                        System.Console.ANSI.Common.Reset of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
4d743c9b4d5168f2a32effda28c2da9b
  chatToRoom5 :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Unix.csi
                   Main.chatToRoom6
                   System.Console.ANSI.Unix.setSGRCode1) -}
41f2262c6cce79c6f155a06d09f92c49
  chatToRoom6 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.chatToRoom7
                   (GHC.Types.[] @ GHC.Types.Int)) -}
26a42775e776eea4757b9b3d929c5861
  chatToRoom7 :: GHC.Types.Int
  {- Unfolding: (case System.Console.ANSI.Unix.$wsgrToCode
                        Main.chatToRoom8 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
4d35ecc94b8cd67ea6dcda38a1d4e019
  chatToRoom8 :: System.Console.ANSI.Common.SGR
  {- HasNoCafRefs, Strictness: m8,
     Unfolding: (System.Console.ANSI.Common.SetColor
                   System.Console.ANSI.Common.Foreground
                   System.Console.ANSI.Common.Dull
                   System.Console.ANSI.Common.Red) -}
39cfe66bcd76215e1f6d2de30203e81c
  chatToRoom9 :: Main.ID
  {- Strictness: x -}
13cd0ef8263a0bbfb4b96add95a3d7bc
  chatroomChatBroadcast ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,1*U>,
     Unfolding: (\ (roomId :: GHC.Base.String)
                   (clientName :: GHC.Base.String)
                   (message :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   "CHAT: "#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      roomId
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \CLIENT_NAME: "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            clientName
                            (GHC.CString.unpackAppendCString#
                               "\n\
                               \MESSAGE: "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  message
                                  Main.chatroomChatBroadcast1)))))) -}
972822a95749740edc8de5134f9263ec
  chatroomChatBroadcast1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \\n"#) -}
01fa0b9f12fa74a17aca01b08b239c2d
  chatroomJoinBroadcast ::
    Main.Client -> Main.Chatroom -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(A,A,U,A,A)><L,1*U(A,A,1*U(U))>,
     Unfolding: (\ (c :: Main.Client) (chatroom :: Main.Chatroom) ->
                 GHC.CString.unpackAppendCString#
                   "CHAT:"#
                   (case chatroom of wild { Main.Chatroom ds ds1 rmId ->
                    case rmId of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \CLIENT_NAME: "#
                         (case c of wild1 { Main.Client ds2 ds3 name ds4 ds5 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            name
                            (GHC.CString.unpackAppendCString#
                               "\n\
                               \MESSAGE:User "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  name
                                  Main.chatroomJoinBroadcast1)) })) } } })) -}
207930330fbfc71978966fed236dcb4a
  chatroomJoinBroadcast1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   " has joined.\n\
                   \\n"#) -}
41f0a748b0c4368766fe66c7b5e950d7
  chatroomLeaveBroadcast ::
    Main.Client -> Main.Chatroom -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(A,A,U,A,A)><L,1*U(1*U,A,1*U(U))>,
     Unfolding: (\ (cl :: Main.Client) (ch :: Main.Chatroom) ->
                 GHC.CString.unpackAppendCString#
                   "CHAT: "#
                   (case ch of wild { Main.Chatroom ds ds1 rmId ->
                    case rmId of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \CLIENT_NAME:"#
                         (case cl of wild1 { Main.Client ds2 ds3 name ds4 ds5 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            name
                            (GHC.CString.unpackAppendCString#
                               "\n\
                               \MESSAGE:"#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  name
                                  (GHC.CString.unpackAppendCString#
                                     " has left "#
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        ds
                                        Main.chatroomLeaveBroadcast1)))) })) } } })) -}
d7fca51b86685c349515f53a77f7228a
  chatroomLeaveBroadcast1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   ".\n\
                   \\n"#) -}
404a1c499a1c63295add3a2a4533b780
  chatroomPseudoLeaveBroadcast ::
    GHC.Base.String
    -> GHC.Base.String -> Main.Chatroom -> GHC.Base.String
  {- Arity: 3, Strictness: <L,A><L,U><L,1*U(1*U,A,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: Main.Chatroom) ->
                 Main.$wchatroomPseudoLeaveBroadcast w1 w2) -}
9ff5be958ce2f3dbf8d9a1d69dd1f16d
  clientJoinResponse ::
    Main.Client
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U(1*U,A,1*U(U))>,
     Unfolding: (\ (c :: Main.Client)
                   (serverIP :: GHC.Base.String)
                   (serverPort :: GHC.Base.String)
                   (chatroom :: Main.Chatroom) ->
                 GHC.CString.unpackAppendCString#
                   "JOINED_CHATROOM: "#
                   (case chatroom of wild { Main.Chatroom name ds ds1 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      name
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \SERVER_IP: "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            serverIP
                            (GHC.CString.unpackAppendCString#
                               "\n\
                               \PORT: "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  serverPort
                                  (GHC.CString.unpackAppendCString#
                                     "\n\
                                     \ROOM_REF: "#
                                     (case ds1 of ww2 { GHC.Types.I# ww3 ->
                                      case GHC.Show.$wshowSignedInt
                                             0#
                                             ww3
                                             (GHC.Types.[]
                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                      GHC.Base.++
                                        @ GHC.Types.Char
                                        (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                        (GHC.CString.unpackAppendCString#
                                           "\n\
                                           \JOIN_ID: "#
                                           (case c of wild1 { Main.Client ds2 ds3 ds4 ds5 cId ->
                                            case cId of ww1 { GHC.Types.I# ww8 ->
                                            case GHC.Show.$wshowSignedInt
                                                   0#
                                                   ww8
                                                   (GHC.Types.[]
                                                      @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                                            GHC.Base.++
                                              @ GHC.Types.Char
                                              (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                                              Main.clientJoinResponse1 } } })) } })))))) })) -}
7c03e73ad9bed6383c2f20eb14241ae7
  clientJoinResponse1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
f08baa5a3be9d26ec11c1032a1636e4c
  clientLeaveResponse ::
    Main.Client -> Main.Chatroom -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,1*U(U))><L,1*U(A,A,1*U(U))>,
     Unfolding: (\ (cl :: Main.Client) (ch :: Main.Chatroom) ->
                 GHC.CString.unpackAppendCString#
                   "LEFT_CHATROOM:"#
                   (case ch of wild { Main.Chatroom ds ds1 rmId ->
                    case rmId of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           0#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \JOIN_ID:"#
                         (case cl of wild1 { Main.Client ds2 ds3 ds4 ds5 cId ->
                          case cId of ww1 { GHC.Types.I# ww8 ->
                          case GHC.Show.$wshowSignedInt
                                 0#
                                 ww8
                                 (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                            Main.clientJoinResponse1 } } })) } } })) -}
6b60ca4fa95d255567ff934896e35ca1
  clientPseudoLeaveResponse ::
    GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (clId :: GHC.Base.String)
                   (chId :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   "LEFT_CHATROOM: "#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      chId
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \JOIN_ID: "#
                         (GHC.Base.++ @ GHC.Types.Char clId Main.clientJoinResponse1)))) -}
09365078531d05e0b5f6321ebe8cb992
  createChatroom ::
    Main.Name
    -> Main.IDGenerator -> GHC.Types.IO (GHC.MVar.MVar Main.Chatroom)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.createChatroom1
                  `cast`
                (<Main.Name>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.MVar.MVar Main.Chatroom>_R)) -}
1975022a5e0bf9cff10456df96aef2f6
  createChatroom1 ::
    Main.Name
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.MVar.MVar Main.Chatroom #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Name)
                   (w1 :: Main.IDGenerator)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { GHC.MVar.MVar ww1 ->
                 Main.$wcreateChatroom w ww1 w2 }) -}
6e1df4bbcca6b81acfabdfdca0921b72
  decSocketCount :: GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.decSocketCount1
                  `cast`
                (<GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2afc240a36e2cf41c0e3418a0cc0ce5d
  decSocketCount1 ::
    GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case count of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        (case ipv1 of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.-# x 1#) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
89474472334e11e176eba28237d2baaa
  disconnectClient :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Network.Socket.close1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
51310d4707100546f95ac4e3b2584c27
  endThread ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.endThread1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bc9f07f4dbe903ba97758483b044d57a
  endThread1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (s :: Network.Socket.Types.Socket)
                   (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wclose ww1 ww7 eta of ds1 { (#,#) ipv ipv1 ->
                 Main.endThread2 count ipv } } }) -}
d81a3b485388a13443a60124728f102e
  endThread2 ::
    GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case count of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        (case ipv1 of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1#) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
fb1f9123e1cee9f5385f0abc6e3a1d1c
  enterChatroom ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 8,
     Strictness: <L,U(U(U),U,U,U,U)><L,U><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.enterChatroom1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d4dca822bf788dbe55265d576a15cb13
  enterChatroom1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U(U(U),U,U,U,U)><L,U><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U> -}
12255a9b3158fdee8a2f482b9838f4d1
  findById :: [Main.Client] -> Main.ID -> Main.Client
  {- Arity: 2, Strictness: <S,1*U><S(S),1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Main.Client]) (w1 :: Main.ID) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case Main.$wfindById w ww1 of ww2 { (#,,,,#) ww3 ww4 ww5 ww6 ww7 ->
                 Main.Client ww3 ww4 ww5 ww6 ww7 } }) -}
2d740cbf7de1ed5d40456e0a0e07f707
  getChatMessageInfo ::
    GHC.Base.String
    -> (GHC.Base.String, GHC.Base.String, GHC.Base.String,
        GHC.Base.String)
  {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wgetChatMessageInfo w of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 (ww1, ww2, ww3, ww4) }) -}
b026cf9599ae133741bfb1a401ff3f7e
  getChatroom ::
    Main.Name
    -> [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Types.IO (GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getChatroom1
                  `cast`
                (<Main.Name>_R
                 ->_R <[GHC.MVar.MVar Main.Chatroom]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom)>_R)) -}
31c87e68e692d14faf89bf6b5c6b53a3
  getChatroom1 ::
    Main.Name
    -> [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><S,U> -}
4ee19e5048f7d34aa4df9087164d01e8
  getChatroomByID ::
    Main.ID
    -> [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Types.IO (GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.chatToRoom12
                  `cast`
                (<Main.ID>_R
                 ->_R <[GHC.MVar.MVar Main.Chatroom]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom)>_R)) -}
5ae8d3bd80bbeb098a4951f4837a6d48
  getClientByID ::
    Main.ID -> [Main.Client] -> GHC.Base.Maybe Main.Client
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U> -}
80c0d22a39fedbe6a2076467007b94f4
  getClientID :: Main.Client -> Main.ID
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 cId -> cId }) -}
0d47cd216c9a132a257ee83eba6ff495
  getClientIP :: Main.Client -> Main.IP
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ip ds1 ds2 ds3 ds4 -> ip }) -}
9da0258b2169d9d5494dca96249d646b
  getClientName :: Main.Client -> Main.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 name ds3 ds4 -> name }) -}
878bb5e01927227b0ff01db3c00ae584
  getClientPort :: Main.Client -> Main.Port
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 port ds2 ds3 ds4 -> port }) -}
bbeee2bce25bfadf544db00dd5ddbe89
  getClientSocket :: Main.Client -> Network.Socket.Types.Socket
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U,U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 sock ds4 -> sock }) -}
81ca395b101c279ef2805cff56e26d57
  getJoinMesgInfo ::
    GHC.Base.String -> GHC.Types.IO (GHC.Base.String, GHC.Base.String)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getJoinMesgInfo1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <(GHC.Base.String, GHC.Base.String)>_R)) -}
770f540d3ea87c61c2306fa9d720bc55
  getJoinMesgInfo1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (GHC.Base.String, GHC.Base.String) #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (msg :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        msg
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    let {
                      mgsLines :: [GHC.Base.String] = Data.OldList.lines msg
                    } in
                    (Main.$wunsafeDrop5
                       @ GHC.Types.Char
                       15#
                       (GHC.List.$w!! @ GHC.Base.String mgsLines 0#),
                     Main.$wunsafeDrop4
                       @ GHC.Types.Char
                       13#
                       (GHC.List.$w!! @ GHC.Base.String mgsLines 3#)) #) }) -}
d4544cbf393acac9037bca18d8e51aed
  getLeaveMessageInfo ::
    GHC.Base.String
    -> (GHC.Base.String, GHC.Base.String, GHC.Base.String)
  {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wgetLeaveMessageInfo w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
911593ead5bac3ca68c7beeb8ea5a535
  getNewId :: Main.IDGenerator -> GHC.Types.IO Main.ID
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getNewId1
                  `cast`
                (<Main.IDGenerator>_R ->_R Sym (GHC.Types.N:IO[0] <Main.ID>_R)) -}
faca49b74168057a42e557e673792e23
  getNewId1 ::
    Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.ID #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (gen :: Main.IDGenerator)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case gen of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        mvar#
                        (case ipv1 of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1#) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, ipv1 #) } } }) -}
eecff20b5f1c5db019eff25610ca591b
  getRoomClients :: Main.Chatroom -> [Main.Client]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom ds1 clients ds2 -> clients }) -}
41b1b3cb2a8d9d7baaa1035cb5ac4c79
  getRoomId :: Main.Chatroom -> Main.ID
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom ds1 ds2 rmId -> rmId }) -}
aa69d35353a5dccf4923baafa2a9f195
  getRoomName :: Main.Chatroom -> Main.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom name ds1 ds2 -> name }) -}
7808c29900fc44a8068abfbd739168b0
  handleMessage ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 9,
     Strictness: <L,U(U(U),U,U,U,U(U))><L,U><L,1*U(U)><L,U><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleMessage1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c8810e9f82f5ace372c7d8b4a320a952
  handleMessage1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,U(U(U),U,U,U,U(U))><L,U><L,1*U(U)><L,U><L,U><L,U><L,U(U)><L,U(U)><S,U> -}
d860625c301cb2ce4881c65821fb5c90
  incSocketCount :: GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.endThread2
                  `cast`
                (<GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
634fab3a904c7f82c21c6f67e9a6b618
  initChatrooms :: GHC.Types.IO [GHC.MVar.MVar Main.Chatroom]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.initChatrooms1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.MVar.MVar Main.Chatroom]>_R)) -}
4975c108757e82b324ee2b7b407bbaef
  initChatrooms1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [GHC.MVar.MVar Main.Chatroom] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, GHC.Types.[] @ (GHC.MVar.MVar Main.Chatroom) #)) -}
25d91d444ea891dab69b1122843f20d1
  initForum :: GHC.Types.IO Main.Forum
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.initForum1 `cast` (Sym (GHC.Types.N:IO[0] <Main.Forum>_R)) -}
76e496af73104b4d4fc344c05dc7561a
  initForum1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Forum #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        s of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        ipv1
                        (GHC.Types.[] @ (GHC.MVar.MVar Main.Chatroom))
                        ipv of s2# { DEFAULT ->
                 (# s2#,
                    GHC.MVar.MVar @ [GHC.MVar.MVar Main.Chatroom] ipv1 #) } }) -}
7001bec3e40d43f811d6a4c25617488f
  initSocket ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.IO Network.Socket.Types.Socket
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.initSocket1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Socket.Types.Socket>_R)) -}
bf7cc64078ed5a8f021ae16cb1b77a08
  initSocket1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (host :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$wsocket
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Network.Socket.getSocketOption3
                        Network.Socket.setSocketOption2
                        Network.Socket.ReuseAddr
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) level opt ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        4#
                        4#
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 let {
                   ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv7
                 } in
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        ptr
                        0#
                        1#
                        ipv6 of s2 { DEFAULT ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds { GHC.Int.I32# ds5 ->
                 case level
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds6 { GHC.Int.I32# ds7 ->
                 case opt
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds8 { GHC.Int.I32# ds9 ->
                 case {__pkg_ccall network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG setsockopt GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Addr#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           GHC.Prim.Int# #)}
                        ds5
                        ds7
                        ds9
                        ptr
                        4#
                        s2 of wild2 { (#,#) ds10 ds11 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Network.Socket.Types.Socket #)
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case Network.Socket.getAddrInfo1
                            (GHC.Base.Nothing @ Network.Socket.AddrInfo)
                            (GHC.Base.Just @ GHC.Base.String host)
                            (GHC.Base.Just @ GHC.Base.String port)
                            w of ds12 { (#,#) ipv8 ipv9 ->
                     case ipv9 of wild1 {
                       []
                       -> GHC.IO.failIO1
                            @ Network.Socket.Types.Socket
                            Main.initSocket2
                            ipv8
                       : addr ds13
                       -> case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                          case Network.Socket.$wbind
                                 ds `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                                 ww7
                                 (Network.Socket.addrAddress addr)
                                 ipv8 of ds14 { (#,#) ipv10 ipv11 ->
                          (# ipv10, ww #) } } } }
                 } in
                 case GHC.Prim.narrow32Int# ds11 of wild3 {
                   DEFAULT
                   -> case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ds10 of s4 { DEFAULT ->
                      $w$j s4 }
                   -1#
                   -> case Foreign.C.Error.throwErrno1
                             @ Foreign.C.Types.CInt
                             Network.Socket.setSocketOption2
                             ds10 of ds12 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ipv8 of s4 { DEFAULT ->
                      $w$j s4 } } } } } } } } } } } } } }) -}
d6fabf93ac44777cc471901bdf9f442d
  initSocket2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Pattern match failure in do expression at src/Main.hs:151:9-14"#) -}
50885a0eca7a1cb8ec0307eb03f7bf98
  insertChatroom ::
    Main.Forum -> GHC.MVar.MVar Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.insertChatroom1
                  `cast`
                (<Main.Forum>_R
                 ->_R <GHC.MVar.MVar Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
cc513a9bb471c947580e70edfac9ed4b
  insertChatroom1 ::
    Main.Forum
    -> GHC.MVar.MVar Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (forum :: Main.Forum)
                   (newRm :: GHC.MVar.MVar Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case forum of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        mvar#
                        (GHC.Base.augment
                           @ (GHC.MVar.MVar Main.Chatroom)
                           (\ @ b
                              (c :: GHC.MVar.MVar Main.Chatroom -> b -> b)[OneShot]
                              (n :: b)[OneShot] ->
                            GHC.Base.foldr @ (GHC.MVar.MVar Main.Chatroom) @ b c n ipv1)
                           (GHC.Types.:
                              @ (GHC.MVar.MVar Main.Chatroom)
                              newRm
                              (GHC.Types.[] @ (GHC.MVar.MVar Main.Chatroom))))
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
33a3692d985670470ab6cd214ea0fe1a
  isRoomEmpty :: Main.Chatroom -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom ds1 clients ds2 ->
                 GHC.List.null @ Main.Client clients }) -}
f809647dc1a3773a80015d3d77bd792e
  leaveChatroom ::
    Network.Socket.Types.Socket
    -> GHC.Base.String -> Main.Forum -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.leaveChatroom1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a7e825dde4552c3d2cbac41354a970a7
  leaveChatroom1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> Main.Forum
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U><L,1*U(U)><S,U> -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
b08d228f4059532a99441778635cdde9
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
3da13b3996d7cc26b35c301c6c216431
  newIdGenerator :: GHC.Types.IO (GHC.MVar.MVar Main.ID)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.newIdGenerator1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.MVar.MVar Main.ID>_R)) -}
05c181600a682b5c441691273cbc350e
  newIdGenerator1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.MVar.MVar Main.ID #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        eta of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        ipv1
                        Main.newIdGenerator2
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.MVar.MVar @ Main.ID ipv1 #) } }) -}
877bb869ec05fb19b31afc5c35b8065d
  newIdGenerator2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
53667cd92040ef4ed506c24ecf25a329
  printAllChatrooms ::
    [GHC.MVar.MVar Main.Chatroom] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.printAllChatrooms1
                  `cast`
                (<[GHC.MVar.MVar Main.Chatroom]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
61d8999c14aeb60ca033ce0b6fb2526d
  printAllChatrooms1 ::
    [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
910c41be3ea2c5f1c93c5d2cbb338607
  receiveMessage ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 8,
     Strictness: <L,U(U(U),U,U,U,U(U))><L,1*U(U)><L,U><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.receiveMessage1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f74558bbfe0234360d135d7b3265a4dd
  receiveMessage1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U(U(U),U,U,U,U(U))><L,1*U(U)><L,U><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: (\ (sock :: Network.Socket.Types.Socket)
                   (killSwitch :: GHC.MVar.MVar ())
                   (host :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (clientInfo :: GHC.Base.String)
                   (forum :: Main.Forum)
                   (gen :: Main.IDGenerator)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.chatToRoom2
                        GHC.Types.False
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Network.Socket.ByteString.$wrecv
                        sock
                        4096#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.receiveMessage2
                        GHC.Types.False
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ipv3 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout
                            Main.chatToRoom2
                            GHC.Types.False
                            w of ds4 { (#,#) ipv6 ipv7 ->
                     Main.handleMessage1
                       sock
                       (Data.ByteString.Internal.$wunpackAppendCharsLazy
                          ww1
                          ww2
                          ww3
                          ww4
                          (GHC.Types.[] @ GHC.Types.Char))
                       killSwitch
                       host
                       port
                       clientInfo
                       forum
                       gen
                       ipv6 }
                 } in
                 case Data.ByteString.Internal.$wunpackAppendCharsLazy
                        ww1
                        ww2
                        ww3
                        ww4
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   []
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.Types.[] @ GHC.Types.Char)
                             GHC.Types.False
                             ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                      $w$j ipv6 }
                   : ds4 ds5
                   -> case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.CString.unpackAppendCString# "[LOG] Message:\n"# wild)
                             GHC.Types.True
                             ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                      $w$j ipv6 } } } } } }) -}
d8cf9ad06c63bb4ea0671c9d30e8cd64
  receiveMessage2 :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Unix.csi
                   Main.receiveMessage3
                   System.Console.ANSI.Unix.setSGRCode1) -}
6e5f98d56f0647e7711c7698a78a0aa1
  receiveMessage3 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Main.receiveMessage4
                   (GHC.Types.[] @ GHC.Types.Int)) -}
459b9a021a6b032a8acd2c467755e8d5
  receiveMessage4 :: GHC.Types.Int
  {- Unfolding: (case System.Console.ANSI.Unix.$wsgrToCode
                        Main.receiveMessage5 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
4f5f4838304384cbd50e478bafe48216
  receiveMessage5 :: System.Console.ANSI.Common.SGR
  {- HasNoCafRefs, Strictness: m8,
     Unfolding: (System.Console.ANSI.Common.SetColor
                   System.Console.ANSI.Common.Foreground
                   System.Console.ANSI.Common.Vivid
                   System.Console.ANSI.Common.Cyan) -}
d301e68bf4c97f7e47ad22451d7c00fb
  removeClient ::
    Main.Client -> GHC.MVar.MVar Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.removeClient1
                  `cast`
                (<Main.Client>_R
                 ->_R <GHC.MVar.MVar Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8412cd9ba9cbb1b6a469dcf592d92fc4
  removeClient1 ::
    Main.Client
    -> GHC.MVar.MVar Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Client)
                   (w1 :: GHC.MVar.MVar Main.Chatroom)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { GHC.MVar.MVar ww1 ->
                 Main.$wremoveClient w ww1 w2 }) -}
1ffcf0a3dd707677a8c6607b4a11556b
  sendJoinResponse ::
    Network.Socket.Types.Socket
    -> Main.Client
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U(1*U,A,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendJoinResponse1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Main.Client>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
960836bac4fd9c6c58279ce945e34a36
  sendJoinResponse1 ::
    Network.Socket.Types.Socket
    -> Main.Client
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U(1*U,A,1*U(U))><S,U>,
     Unfolding: (\ (s :: Network.Socket.Types.Socket)
                   (c :: Main.Client)
                   (serverPort :: GHC.Base.String)
                   (serverIP :: GHC.Base.String)
                   (chatroom :: Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   responseMsg :: GHC.Base.String
                   = Main.clientJoinResponse c serverIP serverPort chatroom
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString# "Response: \n"# responseMsg)
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        responseMsg
                        0# of ww7 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww7
                        responseMsg of ww6 { Data.ByteString.Internal.PS ww8 ww9 ww10 ww11 ->
                 case Network.Socket.ByteString.$wsend
                        ww1
                        ww8
                        ww9
                        ww10
                        ww11
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, GHC.Tuple.() #) } } } } }) -}
5aa3e3e357444f0a964083081dd83961
  sendLeaveResponse ::
    Network.Socket.Types.Socket
    -> Main.Client -> Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U(A,A,A,A,1*U(U))><L,1*U(A,A,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendLeaveResponse1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Main.Client>_R
                 ->_R <Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
415c3cce652b007fd52df83e1887d9f8
  sendLeaveResponse1 ::
    Network.Socket.Types.Socket
    -> Main.Client
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U(A,A,A,A,1*U(U))><L,1*U(A,A,1*U(U))><S,U>,
     Unfolding: (\ (s :: Network.Socket.Types.Socket)
                   (cl :: Main.Client)
                   (ch :: Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   responseMsg :: GHC.Base.String = Main.clientLeaveResponse cl ch
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString# "Response:\n"# responseMsg)
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        responseMsg
                        0# of ww7 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww7
                        responseMsg of ww6 { Data.ByteString.Internal.PS ww8 ww9 ww10 ww11 ->
                 case Network.Socket.ByteString.$wsend
                        ww1
                        ww8
                        ww9
                        ww10
                        ww11
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, GHC.Tuple.() #) } } } } }) -}
bebf02c5e431f5cc0a3f3e95327ea673
  sendPseudoLeaveResponse ::
    Network.Socket.Types.Socket
    -> GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendPseudoLeaveResponse1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
1b4f3f0fd3ebb12d8e8c6a0a0304fad3
  sendPseudoLeaveResponse1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U><L,1*U><S,U>,
     Unfolding: (\ (s :: Network.Socket.Types.Socket)
                   (clId :: GHC.Base.String)
                   (chId :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   responseMsg :: GHC.Base.String
                   = Main.clientPseudoLeaveResponse clId chId
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString# "Response:\n"# responseMsg)
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        responseMsg
                        0# of ww7 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww7
                        responseMsg of ww6 { Data.ByteString.Internal.PS ww8 ww9 ww10 ww11 ->
                 case Network.Socket.ByteString.$wsend
                        ww1
                        ww8
                        ww9
                        ww10
                        ww11
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, GHC.Tuple.() #) } } } } }) -}
5dcc31dd7923230ec20d5eaa12156bad
  sendToClient :: Main.Client -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LLLS(S(S)SLLL)L),1*U(A,A,A,1*U(1*U(U),1*U,A,A,A),1*U(U))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendToClient1
                  `cast`
                (<Main.Client>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2f3f698a2f00d8ce335fef0947989f4d
  sendToClient1 ::
    Main.Client
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LLLS(S(S)SLLL)L),1*U(A,A,A,1*U(1*U(U),1*U,A,A,A),1*U(U))><L,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Client)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ->
                 case ww4 of ww6 { Network.Socket.Types.MkSocket ww7 ww8 ww9 ww10 ww11 ->
                 case ww7
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ww12 { GHC.Int.I32# ww13 ->
                 Main.$wsendToClient ww13 ww8 ww5 w1 w2 } } }) -}
ed53bf4d36b300ee37310aa6d292b732
  server ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <S(LLLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.server1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
49da4de56328faf41abb9bfc184b3c4c
  server1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <S(LLLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (7, True, False)
                (\ (sock :: Network.Socket.Types.Socket)
                   (killSwitch :: GHC.MVar.MVar ())
                   (host :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (forum :: Main.Forum)
                   (gen :: Main.IDGenerator)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case sock of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wlisten
                        ww1
                        ww7
                        Main.server3
                        eta of ds1 { (#,#) ipv ipv1 ->
                 Main.server2 ww killSwitch host port forum gen ipv } } }) -}
3240a43be467a48b6bc750b7ce4e01a7
  server2 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.MVar.MVar ())
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Base.String)
                   (w4 :: Main.Forum)
                   (w5 :: Main.IDGenerator)
                   (w6 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wserverLoop ww1 ww2 ww3 ww4 ww7 w1 w2 w3 w4 w5 w6 } }) -}
d6279134d090a19931e3f0b0d177e655
  server3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
ea21210b2ddaf3876b21623b2e37eabd
  serverLoop ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.server2
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
instance GHC.Classes.Eq [Main.Chatroom] = Main.$fEqChatroom
instance GHC.Classes.Eq [Main.Client] = Main.$fEqClient
instance GHC.Show.Show [Main.Client] = Main.$fShowClient
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

