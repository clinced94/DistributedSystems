
==================== FINAL INTERFACE ====================
2016-11-21 00:07:38.613647 UTC

interface main@main:Main 8001
  interface hash: c6d5fce2f419ccd80110db5c3fd87616
  ABI hash: d60f22bbefd77a3f922ca61e1f6e1359
  export-list hash: 7c85111370e1589e1ca37b64c5b7b6cf
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8668484c2415d15fbda37e3f0d670903
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.addClient
  Main.broadcastJoin
  Main.broadcastLeave
  Main.chatroomJoinBroadcast
  Main.chatroomLeaveBroadcast
  Main.clientJoinResponse
  Main.clientLeaveResponse
  Main.clientPseudoLeaveResponse
  Main.createChatroom
  Main.decSocketCount
  Main.disconnectClient
  Main.endThread
  Main.enterChatroom
  Main.findById
  Main.getChatroom
  Main.getChatroomByID
  Main.getClientByID
  Main.getClientID
  Main.getClientIP
  Main.getClientName
  Main.getClientPort
  Main.getClientSocket
  Main.getJoinMesgInfo
  Main.getLeaveMessageInfo
  Main.getNewId
  Main.getRoomClients
  Main.getRoomId
  Main.getRoomName
  Main.handleMessage
  Main.incSocketCount
  Main.initChatrooms
  Main.initForum
  Main.initSocket
  Main.insertChatroom
  Main.isRoomEmpty
  Main.leaveChatroom
  Main.main
  Main.newIdGenerator
  Main.printAllChatrooms
  Main.receiveMessage
  Main.removeClient
  Main.sendJoinResponse
  Main.sendLeaveResponse
  Main.sendPseudoLeaveResponse
  Main.sendToClient
  Main.server
  Main.serverLoop
  Main.startswith
  Main.Chatroom{Main.Chatroom}
  Main.Client{Main.Client}
  Main.Forum
  Main.ID
  Main.IDGenerator
  Main.IP
  Main.Name
  Main.Port
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Control.Concurrent 98a3a12a2ace3d27758947d9f1041f90
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Bool fdecca24596e58d69d3776148d262f25
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.String 69bb34ee5f2f4d95a41479e62b8fdc61
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Conc.Sync 800ad52ae188c67fd514a07ba8a64fcc
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.MVar 5a1706a0bf7a7186672dad8d28229b31
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  base-4.9.0.0:Text.Read 9c1be14f7e5eac8b18bcb566c5763677
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 6aef0058c6bf280aaddfe6ef70d5f28b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket 16daba302e6d1376ace8d6bc8354708f
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.ByteString 0651e1723028c296375d19eb3a5afe69
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.Types c045bc4119b787ed28c457fa81ec4a37
dd90580d9af50e544ad882a58a4e0321
  $fEqChatroom :: GHC.Classes.Eq Main.Chatroom
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Chatroom Main.$fEqChatroom_$c== Main.$fEqChatroom_$c/= -}
dd90580d9af50e544ad882a58a4e0321
  $fEqChatroom_$c/= ::
    Main.Chatroom -> Main.Chatroom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Chatroom) (b :: Main.Chatroom) ->
                 case Main.$fEqChatroom_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
dd90580d9af50e544ad882a58a4e0321
  $fEqChatroom_$c== ::
    Main.Chatroom -> Main.Chatroom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Chatroom) (w1 :: Main.Chatroom) ->
                 case w of ww { Main.Chatroom ww1 ww2 ww3 ->
                 case w1 of ww4 { Main.Chatroom ww5 ww6 ww7 ->
                 Main.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
a72c8007e4bf9034a76817a673f1a8a3
  $fEqClient :: GHC.Classes.Eq Main.Client
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Client Main.$fEqClient_$c== Main.$fEqClient_$c/= -}
a72c8007e4bf9034a76817a673f1a8a3
  $fEqClient_$c/= :: Main.Client -> Main.Client -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U,1*U,1*U(A,A,A,A,1*U(U)),1*U(U))><S(SLLLL),1*U(1*U,1*U,1*U,1*U(A,A,A,A,1*U(U)),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Client) (b :: Main.Client) ->
                 case Main.$fEqClient_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a72c8007e4bf9034a76817a673f1a8a3
  $fEqClient_$c== :: Main.Client -> Main.Client -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U,1*U,1*U,1*U(A,A,A,A,1*U(U)),1*U(U))><S(SLLLL),1*U(1*U,1*U,1*U,1*U(A,A,A,A,1*U(U)),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Client) (w1 :: Main.Client) ->
                 case w of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ->
                 case w1 of ww6 { Main.Client ww7 ww8 ww9 ww10 ww11 ->
                 Main.$w$c==1 ww1 ww2 ww3 ww4 ww5 ww7 ww8 ww9 ww10 ww11 } }) -}
e6b2067888617f9198ceed4027d11ad3
  $tc'Chatroom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17087822669908215985##
                   562869871650124454##
                   Main.$trModule
                   Main.$tc'Chatroom1) -}
debd9fb9c0c1d15e880f7bda7c6dec66
  $tc'Chatroom1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chatroom"#) -}
e62d791731323355b04c005ddd44e49e
  $tc'Client :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14317905627767584460##
                   8020356174247805466##
                   Main.$trModule
                   Main.$tc'Client1) -}
1e31cdcbef3d5a45efde6decabdcaefc
  $tc'Client1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Client"#) -}
e82f775f3735c5d968e088499db2465e
  $tcChatroom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9706153233630221117##
                   1865358357504204911##
                   Main.$trModule
                   Main.$tcChatroom1) -}
537933bca6f75e29999f47a72ba4594d
  $tcChatroom1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Chatroom"#) -}
824c8b6e5d1e111a64ffa02e17dfa0f0
  $tcClient :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2041806266336690928##
                   6211083142683335045##
                   Main.$trModule
                   Main.$tcClient1) -}
f6308ac30128598c150371405caec582
  $tcClient1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Client"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
36b50f8fb370c4a9e4c2947ac0ec00fc
  $w$c== ::
    Main.Name
    -> [Main.Client]
    -> Main.ID
    -> Main.Name
    -> [Main.Client]
    -> Main.ID
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(U)><S,1*U><L,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Main.Name)
                   (ww1 :: [Main.Client])
                   (ww2 :: Main.ID)
                   (ww3 :: Main.Name)
                   (ww4 :: [Main.Client])
                   (ww5 :: Main.ID) ->
                 case GHC.Base.eqString ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Main.Client
                             Main.$fEqClient
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.eqInt ww2 ww5 } }) -}
4f0d7ff96f45f6c150c971ddb77e7aad
  $w$c==1 ::
    Main.IP
    -> Main.Port
    -> Main.Name
    -> Network.Socket.Types.Socket
    -> Main.ID
    -> Main.IP
    -> Main.Port
    -> Main.Name
    -> Network.Socket.Types.Socket
    -> Main.ID
    -> GHC.Types.Bool
  {- Arity: 10, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U(A,A,A,A,1*U(U))><L,1*U(U)><S,1*U><L,1*U><L,1*U><L,1*U(A,A,A,A,1*U(U))><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Main.IP)
                   (ww1 :: Main.Port)
                   (ww2 :: Main.Name)
                   (ww3 :: Network.Socket.Types.Socket)
                   (ww4 :: Main.ID)
                   (ww5 :: Main.IP)
                   (ww6 :: Main.Port)
                   (ww7 :: Main.Name)
                   (ww8 :: Network.Socket.Types.Socket)
                   (ww9 :: Main.ID) ->
                 case GHC.Base.eqString ww ww5 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Base.eqString ww1 ww6 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Base.eqString ww2 ww7 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww3 of wild3 { Network.Socket.Types.MkSocket ds2 ds3 ds4 ds5 m1 ->
                                case ww8 of wild4 { Network.Socket.Types.MkSocket ds6 ds7 ds8 ds9 m2 ->
                                case m1 of wild5 { GHC.MVar.MVar mvar1# ->
                                case m2 of wild6 { GHC.MVar.MVar mvar2# ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.sameMVar#
                                          @ GHC.Prim.RealWorld
                                          @ Network.Socket.Types.SocketStatus
                                          mvar1#
                                          mvar2#) of wild7 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> GHC.Classes.eqInt ww4 ww9 } } } } } } } }) -}
5d6561102bd64b23ad95c51860e73aa0
  $wcreateChatroom ::
    Main.Name
    -> GHC.Prim.MVar# GHC.Prim.RealWorld Main.ID
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.MVar.MVar Main.Chatroom #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Name)
                   (ww :: GHC.Prim.MVar# GHC.Prim.RealWorld Main.ID)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        ww
                        (case ipv1 of wild { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1#) })
                        ipv of s2# { DEFAULT ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        s2# of ds { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        ipv3
                        (Main.Chatroom w (GHC.Types.[] @ Main.Client) ipv1)
                        ipv2 of s2#1 { DEFAULT ->
                 (# s2#1, GHC.MVar.MVar @ Main.Chatroom ipv3 #) } } } }) -}
bf88ca4f52d18442c4038b5b54e629a6
  $wfindById ::
    [Main.Client]
    -> GHC.Prim.Int#
    -> (# Main.IP, Main.Port, Main.Name, Network.Socket.Types.Socket,
          Main.ID #)
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
d098edbe6a21b0757927a04fca167a33
  $wgetLeaveMessageInfo ::
    GHC.Base.String
    -> (# GHC.Base.String, GHC.Base.String, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 let {
                   msgLines :: [GHC.Base.String] = Data.OldList.lines w
                 } in
                 (# Main.$wunsafeDrop4
                      @ GHC.Types.Char
                      16#
                      (GHC.List.$w!! @ GHC.Base.String msgLines 0#),
                    Main.$wunsafeDrop3
                      @ GHC.Types.Char
                      9#
                      (GHC.List.$w!! @ GHC.Base.String msgLines 1#),
                    Main.$wunsafeDrop2
                      @ GHC.Types.Char
                      13#
                      (GHC.List.$w!! @ GHC.Base.String msgLines 2#) #)) -}
6e4a33e65739423ebe8dc85c6ee0c195
  $wleaveChatroom ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.Prim.MVar# GHC.Prim.RealWorld [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U><S,U><S,U>,
     Inline: [0] -}
eab6afd8e148bdfcee98fe3b3449b0d0
  $wremoveClient ::
    Main.Client
    -> GHC.Prim.MVar# GHC.Prim.RealWorld Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Client)
                   (ww :: GHC.Prim.MVar# GHC.Prim.RealWorld Main.Chatroom)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Main.Chatroom name clients rmId ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        ww
                        (Main.Chatroom
                           name
                           (Data.OldList.\\
                              @ Main.Client
                              Main.$fEqClient
                              clients
                              (GHC.Types.: @ Main.Client w (GHC.Types.[] @ Main.Client)))
                           rmId)
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
e40b86ec6cd5bc44d4a0aa3130faf26c
  $wsendLeaveResponse ::
    Foreign.C.Types.CInt
    -> Main.ID
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U(U)><L,1*U(U)><L,1*U(1*U,A,A)><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Foreign.C.Types.CInt)
                   (ww1 :: Main.ID)
                   (w :: Main.Chatroom)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   cs :: [GHC.Types.Char]
                   = Main.clientLeaveResponse
                       (Main.Client
                          Main.sendLeaveResponse8
                          Main.sendLeaveResponse7
                          Main.sendLeaveResponse6
                          (Network.Socket.Types.MkSocket
                             ww
                             Main.sendLeaveResponse5
                             Main.sendLeaveResponse4
                             Main.sendLeaveResponse3
                             Main.sendLeaveResponse2)
                          ww1)
                       w
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char cs 0# of ww2 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww2
                        cs of ww6 { Data.ByteString.Internal.PS ww7 ww8 ww9 ww10 ->
                 case Network.Socket.ByteString.$wsend
                        ww
                        ww7
                        ww8
                        ww9
                        ww10
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) } } }) -}
b34d8901321334933ca3ee00fa71c6f2
  $wsendPseudoLeaveResponse ::
    Foreign.C.Types.CInt
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U(U)><L,1*U><L,1*U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: Foreign.C.Types.CInt)
                   (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   cs :: [GHC.Types.Char] = Main.clientPseudoLeaveResponse w w1
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char cs 0# of ww2 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww2
                        cs of ww6 { Data.ByteString.Internal.PS ww7 ww8 ww9 ww10 ->
                 case Network.Socket.ByteString.$wsend
                        ww
                        ww7
                        ww8
                        ww9
                        ww10
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) } } }) -}
316e94a742a5863e1e1684e0041d44c7
  $wsendToClient ::
    Foreign.C.Types.CInt
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U(U)><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: Foreign.C.Types.CInt)
                   (w :: GHC.Base.String)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.List.$wlenAcc @ GHC.Types.Char w 0# of ww2 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww2
                        w of ww6 { Data.ByteString.Internal.PS ww7 ww8 ww9 ww10 ->
                 case Network.Socket.ByteString.$wsend
                        ww
                        ww7
                        ww8
                        ww9
                        ww10
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Tuple.() #) } } }) -}
841e8d7ed8f53969e9a78409f30b86b5
  $wserverLoop ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 11,
     Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Inline: [0] -}
a7fcd793b8606cac7211ca5df5b1d36e
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
f8aeca30cc0323802397450d786aa3a7
  $wunsafeDrop1 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
16db326310dd6991fd4dd9d5f0c31b76
  $wunsafeDrop2 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
88d558598e3a0fc2fee9844cdc2429d0
  $wunsafeDrop3 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
a3491b5d55189865020b65937aff88bc
  $wunsafeDrop4 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
dd90580d9af50e544ad882a58a4e0321
  data Chatroom = Chatroom Main.Name [Main.Client] Main.ID
a72c8007e4bf9034a76817a673f1a8a3
  data Client
    = Client Main.IP
             Main.Port
             Main.Name
             Network.Socket.Types.Socket
             Main.ID
be907e28ae56bed47ed4e19e0c429e62
  type Forum = GHC.MVar.MVar [GHC.MVar.MVar Main.Chatroom]
d06a83fac3980621c102c8d41a948683
  type ID = GHC.Types.Int
2f43c89c8c1f541029488f60a6bab3a9
  type IDGenerator = GHC.MVar.MVar Main.ID
c297ec72918f624e92baa0ea9e9bbb16
  type IP = GHC.Base.String
29b1c2467858e581962a498c6425c7cd
  type Name = GHC.Base.String
fc0d8b1c33010e75f44c76a1ba60f601
  type Port = GHC.Base.String
f1777cc5faff7720dcc0fe90481ceef7
  addClient ::
    Main.Client -> GHC.MVar.MVar Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.addClient1
                  `cast`
                (<Main.Client>_R
                 ->_R <GHC.MVar.MVar Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
799c8cfa53184d7798f27de1c2897c46
  addClient1 ::
    Main.Client
    -> GHC.MVar.MVar Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (client :: Main.Client)
                   (room :: GHC.MVar.MVar Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case room of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild1 { Main.Chatroom name clients rmId ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        mvar#
                        (Main.Chatroom
                           name
                           (GHC.Base.augment
                              @ Main.Client
                              (\ @ b (c :: Main.Client -> b -> b)[OneShot] (n :: b)[OneShot] ->
                               GHC.Base.foldr @ Main.Client @ b c n clients)
                              (GHC.Types.: @ Main.Client client (GHC.Types.[] @ Main.Client)))
                           rmId)
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } } }) -}
221546c9323207bc1a7d14022e1a3c38
  broadcastJoin :: Main.Client -> Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U,A,A)><L,1*U(1*U,1*U,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.broadcastJoin1
                  `cast`
                (<Main.Client>_R
                 ->_R <Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
110f238b440d83e78d3acfe718f49baa
  broadcastJoin1 ::
    Main.Client
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U,A,A)><L,1*U(1*U,1*U,A)><S,U>,
     Unfolding: (\ (c :: Main.Client)
                   (ch :: Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.broadcastJoin3
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ch of wild { Main.Chatroom ds clients ds2 ->
                 case clients of wild1 {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : y ys
                   -> case y of wild2 { Main.Client ds3 ds4 ds5 sock ds6 ->
                      case sock of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                      let {
                        broadcastMsg :: GHC.Base.String = Main.chatroomJoinBroadcast c wild
                      } in
                      case GHC.List.$wlenAcc
                             @ GHC.Types.Char
                             broadcastMsg
                             0# of ww7 { DEFAULT ->
                      case Data.ByteString.Internal.$wunsafePackLenChars
                             ww7
                             broadcastMsg of ww6 { Data.ByteString.Internal.PS ww8 ww9 ww10 ww11 ->
                      case Network.Socket.ByteString.$wsend
                             ww1
                             ww8
                             ww9
                             ww10
                             ww11
                             ipv of ds7 { (#,#) ipv2 ipv3 ->
                      GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.broadcastJoin2
                        GHC.Types.True
                        ipv2 } } } } } } } }) -}
6d90d30abfdbe575d178d8ca194e158b
  broadcastJoin2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Broadcast sent!"#) -}
7f7ae5ad45486ce1e607ee3864c91610
  broadcastJoin3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Broadcasting..."#) -}
8e4a8ee1f3491cdc76abcccca9802ea3
  broadcastLeave :: Main.Client -> Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,1*U(A,A,1*U,A,A)><L,1*U(A,1*U,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.broadcastLeave1
                  `cast`
                (<Main.Client>_R
                 ->_R <Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
9f77aa96375fd2afc44e0a201eaf22c3
  broadcastLeave1 ::
    Main.Client
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,1*U(A,A,1*U,A,A)><L,1*U(A,1*U,A)><S,U>,
     Unfolding: (\ (cl :: Main.Client)
                   (ch :: Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.broadcastLeave3
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ch of wild { Main.Chatroom ds clients ds2 ->
                 case clients of wild1 {
                   []
                   -> case GHC.List.badHead
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : y ys
                   -> case y of wild2 { Main.Client ds3 ds4 ds5 sock ds6 ->
                      case sock of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                      let {
                        broadcastMsg :: GHC.Base.String = Main.chatroomLeaveBroadcast cl
                      } in
                      case GHC.List.$wlenAcc
                             @ GHC.Types.Char
                             broadcastMsg
                             0# of ww7 { DEFAULT ->
                      case Data.ByteString.Internal.$wunsafePackLenChars
                             ww7
                             broadcastMsg of ww6 { Data.ByteString.Internal.PS ww8 ww9 ww10 ww11 ->
                      case Network.Socket.ByteString.$wsend
                             ww1
                             ww8
                             ww9
                             ww10
                             ww11
                             ipv of ds7 { (#,#) ipv2 ipv3 ->
                      GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.broadcastLeave2
                        GHC.Types.True
                        ipv2 } } } } } } } }) -}
7ade19ce64f156abf1d8f2728fd3f4d3
  broadcastLeave2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Leave broadcast sent!"#) -}
155639f40185f2402546d1417ea5eece
  broadcastLeave3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Broadcasting leave"#) -}
93010d255fdc18d7a65b031381a834f2
  chatroomJoinBroadcast ::
    Main.Client -> Main.Chatroom -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A,A)><L,1*U(1*U,A,A)>,
     Unfolding: (\ (c :: Main.Client) (chatroom :: Main.Chatroom) ->
                 GHC.CString.unpackAppendCString#
                   "User "#
                   (case c of wild { Main.Client ds ds1 name ds2 ds3 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      name
                      (GHC.CString.unpackAppendCString#
                         " has joined chatroom "#
                         (case chatroom of wild1 { Main.Chatroom name1 ds4 ds5 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            name1
                            Main.chatroomJoinBroadcast1 })) })) -}
c381137589d4f808e1b4185c46b7b816
  chatroomJoinBroadcast1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   ".\n\
                   \\n"#) -}
662843e12dd7527583b90756866eb67b
  chatroomLeaveBroadcast :: Main.Client -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(A,A,1*U,A,A)>,
     Unfolding: (\ (cl :: Main.Client) ->
                 GHC.CString.unpackAppendCString#
                   "User "#
                   (case cl of wild { Main.Client ds ds1 name ds2 ds3 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      name
                      Main.chatroomLeaveBroadcast1 })) -}
1e51ed18f0fc75aef52b9728bd536ef3
  chatroomLeaveBroadcast1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   " has left the room."#) -}
01fd955b615f01b1cc6cf4eb06e78814
  clientJoinResponse ::
    Main.Client
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U(1*U,A,1*U(U))>,
     Unfolding: (\ (c :: Main.Client)
                   (serverIP :: GHC.Base.String)
                   (serverPort :: GHC.Base.String)
                   (chatroom :: Main.Chatroom) ->
                 GHC.CString.unpackAppendCString#
                   "JOINED_CHATROOM: "#
                   (case chatroom of wild { Main.Chatroom name ds ds1 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      name
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \SERVER_IP: "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            serverIP
                            (GHC.CString.unpackAppendCString#
                               "\n\
                               \PORT: "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  serverPort
                                  (GHC.CString.unpackAppendCString#
                                     "\n\
                                     \ROOM_REF: "#
                                     (case ds1 of ww2 { GHC.Types.I# ww3 ->
                                      case GHC.Show.$wshowSignedInt
                                             0#
                                             ww3
                                             (GHC.Types.[]
                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                      GHC.Base.++
                                        @ GHC.Types.Char
                                        (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                        (GHC.CString.unpackAppendCString#
                                           "\n\
                                           \JOIN_ID: "#
                                           (case c of wild1 { Main.Client ds2 ds3 ds4 ds5 cId ->
                                            case cId of ww1 { GHC.Types.I# ww8 ->
                                            case GHC.Show.$wshowSignedInt
                                                   0#
                                                   ww8
                                                   (GHC.Types.[]
                                                      @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                                            GHC.Base.++
                                              @ GHC.Types.Char
                                              (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                                              Main.clientJoinResponse1 } } })) } })))))) })) -}
c7c8241149914d59357f773a97715dda
  clientJoinResponse1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \\n"#) -}
67d781de766c5828180cff8d270fb336
  clientLeaveResponse ::
    Main.Client -> Main.Chatroom -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,1*U(U))><L,1*U(1*U,A,A)>,
     Unfolding: (\ (cl :: Main.Client) (ch :: Main.Chatroom) ->
                 GHC.CString.unpackAppendCString#
                   "LEFT_CHATROOM: "#
                   (case ch of wild { Main.Chatroom name ds ds1 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      name
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \JOIN_ID: "#
                         (case cl of wild1 { Main.Client ds2 ds3 ds4 ds5 cId ->
                          case cId of ww2 { GHC.Types.I# ww3 ->
                          case GHC.Show.$wshowSignedInt
                                 0#
                                 ww3
                                 (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                            Main.clientJoinResponse1 } } })) })) -}
d708b83c1ee391c3780f9f93ebed384c
  clientPseudoLeaveResponse ::
    GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ (clId :: GHC.Base.String)
                   (chId :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   "LEFT_CHATROOM: "#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      chId
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \JOIN_ID: "#
                         (GHC.Base.++ @ GHC.Types.Char clId Main.clientJoinResponse1)))) -}
4eb166f8ec154326cbcaca281aa7a9ad
  createChatroom ::
    Main.Name
    -> Main.IDGenerator -> GHC.Types.IO (GHC.MVar.MVar Main.Chatroom)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.createChatroom1
                  `cast`
                (<Main.Name>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.MVar.MVar Main.Chatroom>_R)) -}
9af9b2ae8809673c127208bdf6bc5fe1
  createChatroom1 ::
    Main.Name
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.MVar.MVar Main.Chatroom #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Name)
                   (w1 :: Main.IDGenerator)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { GHC.MVar.MVar ww1 ->
                 Main.$wcreateChatroom w ww1 w2 }) -}
6e1df4bbcca6b81acfabdfdca0921b72
  decSocketCount :: GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.decSocketCount1
                  `cast`
                (<GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2afc240a36e2cf41c0e3418a0cc0ce5d
  decSocketCount1 ::
    GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case count of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        (case ipv1 of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.-# x 1#) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
89474472334e11e176eba28237d2baaa
  disconnectClient :: Network.Socket.Types.Socket -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Network.Socket.close1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
51310d4707100546f95ac4e3b2584c27
  endThread ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.endThread1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bc9f07f4dbe903ba97758483b044d57a
  endThread1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (s :: Network.Socket.Types.Socket)
                   (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wclose ww1 ww7 eta of ds1 { (#,#) ipv ipv1 ->
                 Main.endThread2 count ipv } } }) -}
d81a3b485388a13443a60124728f102e
  endThread2 ::
    GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case count of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        (case ipv1 of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1#) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
1886e883abdbb4cf86155e5b33e8c556
  enterChatroom ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 8,
     Strictness: <L,U(U(U),U,U,U,U)><L,1*U><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.enterChatroom1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
04063eb719d6ae3e866af865ed095add
  enterChatroom1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U(U(U),U,U,U,U)><L,1*U><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U> -}
55f98618efcec23b6225c32693752f68
  findById :: [Main.Client] -> Main.ID -> Main.Client
  {- Arity: 2, Strictness: <S,1*U><S(S),1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Main.Client]) (w1 :: Main.ID) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case Main.$wfindById w ww1 of ww2 { (#,,,,#) ww3 ww4 ww5 ww6 ww7 ->
                 Main.Client ww3 ww4 ww5 ww6 ww7 } }) -}
d75832fb84957bb92fd29970ec42e463
  getChatroom ::
    Main.Name
    -> [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Types.IO (GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getChatroom1
                  `cast`
                (<Main.Name>_R
                 ->_R <[GHC.MVar.MVar Main.Chatroom]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom)>_R)) -}
67a5f24d95efce375f3555cee08584db
  getChatroom1 ::
    Main.Name
    -> [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><S,U> -}
53c15309bd538093b47e36ca3701ddd9
  getChatroomByID ::
    Main.ID
    -> [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Types.IO (GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getChatroomByID1
                  `cast`
                (<Main.ID>_R
                 ->_R <[GHC.MVar.MVar Main.Chatroom]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom)>_R)) -}
b0b6efcfae78e84d7d9166c2f5fc7912
  getChatroomByID1 ::
    Main.ID
    -> [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U><S,U> -}
56110fbe1d5ccaa5858e21a85923b4a5
  getClientByID ::
    Main.ID -> [Main.Client] -> GHC.Base.Maybe Main.Client
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U> -}
ac9a0d40dc24b094ab104b97bcbfb670
  getClientID :: Main.Client -> Main.ID
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLS),1*U(A,A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 ds4 cId -> cId }) -}
dd7b31c392ac750cf4b82315677686b9
  getClientIP :: Main.Client -> Main.IP
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ip ds1 ds2 ds3 ds4 -> ip }) -}
d3f76df23701391ebb238dd012e4ce4c
  getClientName :: Main.Client -> Main.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 name ds3 ds4 -> name }) -}
595fb5fad44256349fca44380d70b155
  getClientPort :: Main.Client -> Main.Port
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 port ds2 ds3 ds4 -> port }) -}
d1bdd15073a4dd742836f20f5427e89f
  getClientSocket :: Main.Client -> Network.Socket.Types.Socket
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U,U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 sock ds4 -> sock }) -}
eb7e2d0b62180b1a5c990281b2acf879
  getJoinMesgInfo ::
    GHC.Base.String -> GHC.Types.IO (GHC.Base.String, GHC.Base.String)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getJoinMesgInfo1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <([GHC.Types.Char], [GHC.Types.Char])>_R)) -}
1559e92727ad17f05541ec094291847a
  getJoinMesgInfo1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([GHC.Types.Char], [GHC.Types.Char]) #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (msg :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta,
                    let {
                      mgsLines :: [GHC.Base.String] = Data.OldList.lines msg
                    } in
                    (Main.$wunsafeDrop1
                       @ GHC.Types.Char
                       15#
                       (GHC.List.$w!! @ GHC.Base.String mgsLines 0#),
                     Main.$wunsafeDrop
                       @ GHC.Types.Char
                       14#
                       (GHC.List.$w!! @ GHC.Base.String mgsLines 3#)) #)) -}
4730f743e2281a919e202371d747a84b
  getLeaveMessageInfo ::
    GHC.Base.String
    -> (GHC.Base.String, GHC.Base.String, GHC.Base.String)
  {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Main.$wgetLeaveMessageInfo w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
911593ead5bac3ca68c7beeb8ea5a535
  getNewId :: Main.IDGenerator -> GHC.Types.IO Main.ID
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getNewId1
                  `cast`
                (<Main.IDGenerator>_R ->_R Sym (GHC.Types.N:IO[0] <Main.ID>_R)) -}
faca49b74168057a42e557e673792e23
  getNewId1 ::
    Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.ID #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (gen :: Main.IDGenerator)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case gen of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        mvar#
                        (case ipv1 of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1#) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, ipv1 #) } } }) -}
0cb8583276c8d8bf2b9fe75f7969c65e
  getRoomClients :: Main.Chatroom -> [Main.Client]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom ds1 clients ds2 -> clients }) -}
11f825bfc84cc21dc3734df694fe7a6b
  getRoomId :: Main.Chatroom -> Main.ID
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom ds1 ds2 rmId -> rmId }) -}
08612606b854d6a15515696d974e32d9
  getRoomName :: Main.Chatroom -> Main.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom name ds1 ds2 -> name }) -}
1dbede7e1a0b7574d6c775531d1c7154
  handleMessage ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 9,
     Strictness: <L,U(U(U),U,U,U,U(U))><L,U><L,1*U(U)><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleMessage1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7d2e9386029bd7cca675b5d1e76822d1
  handleMessage1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,U(U(U),U,U,U,U(U))><L,U><L,1*U(U)><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U> -}
d860625c301cb2ce4881c65821fb5c90
  incSocketCount :: GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.endThread2
                  `cast`
                (<GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
169920eb4023da102550270c2b6a271c
  initChatrooms :: GHC.Types.IO [GHC.MVar.MVar Main.Chatroom]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.initChatrooms1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.MVar.MVar Main.Chatroom]>_R)) -}
650d27c557f3c155b07f5cc56b808baf
  initChatrooms1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [GHC.MVar.MVar Main.Chatroom] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, GHC.Types.[] @ (GHC.MVar.MVar Main.Chatroom) #)) -}
14b9648b9ee721335d266836b4d6ba9b
  initForum :: GHC.Types.IO Main.Forum
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.initForum1 `cast` (Sym (GHC.Types.N:IO[0] <Main.Forum>_R)) -}
c8bb49924852ee5137232278e30807ac
  initForum1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Forum #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        s of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        ipv1
                        (GHC.Types.[] @ (GHC.MVar.MVar Main.Chatroom))
                        ipv of s2# { DEFAULT ->
                 (# s2#,
                    GHC.MVar.MVar @ [GHC.MVar.MVar Main.Chatroom] ipv1 #) } }) -}
b4da26cecf9f07ff3e23e195533aa2fe
  initSocket ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.IO Network.Socket.Types.Socket
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.initSocket1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Socket.Types.Socket>_R)) -}
759fd45cf5b68ab077733426a633ce4c
  initSocket1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (host :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$wsocket
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Network.Socket.getSocketOption3
                        Network.Socket.setSocketOption2
                        Network.Socket.ReuseAddr
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) level opt ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        4#
                        4#
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 let {
                   ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv7
                 } in
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        ptr
                        0#
                        1#
                        ipv6 of s2 { DEFAULT ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds { GHC.Int.I32# ds5 ->
                 case level
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds6 { GHC.Int.I32# ds7 ->
                 case opt
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds8 { GHC.Int.I32# ds9 ->
                 case {__pkg_ccall network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG setsockopt GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Addr#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           GHC.Prim.Int# #)}
                        ds5
                        ds7
                        ds9
                        ptr
                        4#
                        s2 of wild2 { (#,#) ds10 ds11 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Network.Socket.Types.Socket #)
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case Network.Socket.getAddrInfo1
                            (GHC.Base.Nothing @ Network.Socket.AddrInfo)
                            (GHC.Base.Just @ GHC.Base.String host)
                            (GHC.Base.Just @ GHC.Base.String port)
                            w of ds12 { (#,#) ipv8 ipv9 ->
                     case ipv9 of wild1 {
                       []
                       -> GHC.IO.failIO1
                            @ Network.Socket.Types.Socket
                            Main.initSocket2
                            ipv8
                       : addr ds13
                       -> case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                          case Network.Socket.$wbind
                                 ds `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                                 ww7
                                 (Network.Socket.addrAddress addr)
                                 ipv8 of ds14 { (#,#) ipv10 ipv11 ->
                          (# ipv10, ww #) } } } }
                 } in
                 case GHC.Prim.narrow32Int# ds11 of wild3 {
                   DEFAULT
                   -> case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ds10 of s4 { DEFAULT ->
                      $w$j s4 }
                   -1#
                   -> case Foreign.C.Error.throwErrno1
                             @ Foreign.C.Types.CInt
                             Network.Socket.setSocketOption2
                             ds10 of ds12 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ipv8 of s4 { DEFAULT ->
                      $w$j s4 } } } } } } } } } } } } } }) -}
e94cc6a4b9f49b05531e441a88588157
  initSocket2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Pattern match failure in do expression at src/Main.hs:156:9-14"#) -}
6e5238b5a58ec2dd5095c2dee749f360
  insertChatroom ::
    Main.Forum -> GHC.MVar.MVar Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.insertChatroom1
                  `cast`
                (<Main.Forum>_R
                 ->_R <GHC.MVar.MVar Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c0ed3566e698a8ca1c9ac338f714cbc0
  insertChatroom1 ::
    Main.Forum
    -> GHC.MVar.MVar Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (forum :: Main.Forum)
                   (newRm :: GHC.MVar.MVar Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case forum of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        mvar#
                        (GHC.Base.augment
                           @ (GHC.MVar.MVar Main.Chatroom)
                           (\ @ b
                              (c :: GHC.MVar.MVar Main.Chatroom -> b -> b)[OneShot]
                              (n :: b)[OneShot] ->
                            GHC.Base.foldr @ (GHC.MVar.MVar Main.Chatroom) @ b c n ipv1)
                           (GHC.Types.:
                              @ (GHC.MVar.MVar Main.Chatroom)
                              newRm
                              (GHC.Types.[] @ (GHC.MVar.MVar Main.Chatroom))))
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
30fb2089d66013629bb1ce6cec31b00b
  isRoomEmpty :: Main.Chatroom -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom ds1 clients ds2 ->
                 GHC.List.null @ Main.Client clients }) -}
66c671db57a83f8bf32f5c3f9897b97b
  leaveChatroom ::
    Network.Socket.Types.Socket
    -> GHC.Base.String -> Main.Forum -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.leaveChatroom1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
6cd773aab4be17f9bffe6d6ce77508db
  leaveChatroom1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> Main.Forum
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U><S(S),1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Base.String)
                   (w2 :: Main.Forum)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w2 of ww { GHC.MVar.MVar ww1 ->
                 Main.$wleaveChatroom w w1 ww1 w3 }) -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
b08d228f4059532a99441778635cdde9
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
3da13b3996d7cc26b35c301c6c216431
  newIdGenerator :: GHC.Types.IO (GHC.MVar.MVar Main.ID)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.newIdGenerator1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.MVar.MVar Main.ID>_R)) -}
05c181600a682b5c441691273cbc350e
  newIdGenerator1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.MVar.MVar Main.ID #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        eta of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        ipv1
                        Main.newIdGenerator2
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.MVar.MVar @ Main.ID ipv1 #) } }) -}
877bb869ec05fb19b31afc5c35b8065d
  newIdGenerator2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
c23833459a1daf757205be1e2e18ffb3
  printAllChatrooms ::
    [GHC.MVar.MVar Main.Chatroom] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.printAllChatrooms1
                  `cast`
                (<[GHC.MVar.MVar Main.Chatroom]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a080a9b8620fe0c425805068ba83990c
  printAllChatrooms1 ::
    [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
2a5ff37ab94fef6c794ae1679e7fab73
  receiveMessage ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 8,
     Strictness: <L,U(U(U),U,U,U,U(U))><L,1*U(U)><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.receiveMessage1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a5657a7fb0aa1fc3ec7c17b3c6c09ce7
  receiveMessage1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U(U(U),U,U,U,U(U))><L,1*U(U)><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: (\ (sock :: Network.Socket.Types.Socket)
                   (killSwitch :: GHC.MVar.MVar ())
                   (host :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (clientInfo :: GHC.Base.String)
                   (forum :: Main.Forum)
                   (gen :: Main.IDGenerator)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.ByteString.$wrecv
                        sock
                        4096#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "Message: "#
                           (case ipv1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                            Data.ByteString.Internal.$wunpackAppendCharsLazy
                              ww1
                              ww2
                              ww3
                              ww4
                              (GHC.Types.[] @ GHC.Types.Char) }))
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Main.handleMessage1
                   sock
                   (Data.ByteString.Internal.unpackChars ipv1)
                   killSwitch
                   host
                   port
                   clientInfo
                   forum
                   gen
                   ipv2 } }) -}
24109e0f4ec3810ec451e17f718b3aad
  removeClient ::
    Main.Client -> GHC.MVar.MVar Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.removeClient1
                  `cast`
                (<Main.Client>_R
                 ->_R <GHC.MVar.MVar Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
57c846ba39905fd57c9d56f1f54b3bf4
  removeClient1 ::
    Main.Client
    -> GHC.MVar.MVar Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Client)
                   (w1 :: GHC.MVar.MVar Main.Chatroom)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { GHC.MVar.MVar ww1 ->
                 Main.$wremoveClient w ww1 w2 }) -}
db874e8dc92ceab328514c8a3c985bf2
  sendJoinResponse ::
    Network.Socket.Types.Socket
    -> Main.Client
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U(1*U,A,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendJoinResponse1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Main.Client>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
6d1bc8b8eb8e9024c05c1b7f366154f2
  sendJoinResponse1 ::
    Network.Socket.Types.Socket
    -> Main.Client
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U(A,A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U(1*U,A,1*U(U))><S,U>,
     Unfolding: (\ (s :: Network.Socket.Types.Socket)
                   (c :: Main.Client)
                   (serverIP :: GHC.Base.String)
                   (serverPort :: GHC.Base.String)
                   (chatroom :: Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   responseMsg :: GHC.Base.String
                   = Main.clientJoinResponse c serverIP serverPort chatroom
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString# "Response: \n"# responseMsg)
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        responseMsg
                        0# of ww7 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww7
                        responseMsg of ww6 { Data.ByteString.Internal.PS ww8 ww9 ww10 ww11 ->
                 case Network.Socket.ByteString.$wsend
                        ww1
                        ww8
                        ww9
                        ww10
                        ww11
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, GHC.Tuple.() #) } } } } }) -}
0d83d6e28de4fd5571507670d100760b
  sendLeaveResponse ::
    Main.Client -> Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U(U),A,A,A,A),1*U(U))><L,1*U(1*U,A,A)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendLeaveResponse1
                  `cast`
                (<Main.Client>_R
                 ->_R <Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b03ab4b990b67edc8f285a955f4ee5c8
  sendLeaveResponse1 ::
    Main.Client
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U(U),A,A,A,A),1*U(U))><L,1*U(1*U,A,A)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Client)
                   (w1 :: Main.Chatroom)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ->
                 case ww4 of ww6 { Network.Socket.Types.MkSocket ww7 ww8 ww9 ww10 ww11 ->
                 Main.$wsendLeaveResponse ww7 ww5 w1 w2 } }) -}
9ea37e9f62f49a244caa67885b05ba9b
  sendLeaveResponse2 ::
    GHC.MVar.MVar Network.Socket.Types.SocketStatus
  {- Strictness: x -}
6a7af250b39155b6a55951eee028b381
  sendLeaveResponse3 :: Network.Socket.Types.ProtocolNumber
  {- Strictness: x -}
3d3b242318a4e1cc01fab98efbd61313
  sendLeaveResponse4 :: Network.Socket.Types.SocketType
  {- Strictness: x -}
4767ed9ea1dbac2bb10dba4b5dd3858f
  sendLeaveResponse5 :: Network.Socket.Types.Family
  {- Strictness: x -}
c43c320bb45b27c836d4feb79cecfbf8
  sendLeaveResponse6 :: Main.Name
  {- Strictness: x -}
6646b4b58961cbb22d93216173675f5a
  sendLeaveResponse7 :: Main.Port
  {- Strictness: x -}
a23b44c309b5a1dfe9311130e2c2aff4
  sendLeaveResponse8 :: Main.IP
  {- Strictness: x -}
31fe7e319db1d1235d0610f603bc7fe0
  sendPseudoLeaveResponse ::
    Network.Socket.Types.Socket
    -> GHC.Base.String -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <S,1*U(U(U),A,A,A,A)><L,1*U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendPseudoLeaveResponse1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a250dbeb884784ac5f8f9a6055084ab0
  sendPseudoLeaveResponse1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <S,1*U(U(U),A,A,A,A)><L,1*U><L,1*U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 Main.$wsendPseudoLeaveResponse ww1 w1 w2 w3 }) -}
183f7a7ed5e2d37d445d52635950177f
  sendToClient :: Main.Client -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U(U),A,A,A,A),A)><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendToClient1
                  `cast`
                (<Main.Client>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2d27e2ba9833d731301c7017005e22d9
  sendToClient1 ::
    Main.Client
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LLLSL),1*U(A,A,A,1*U(U(U),A,A,A,A),A)><S,U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Client)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Main.Client ww1 ww2 ww3 ww4 ww5 ->
                 case ww4 of ww6 { Network.Socket.Types.MkSocket ww7 ww8 ww9 ww10 ww11 ->
                 Main.$wsendToClient ww7 w1 w2 } }) -}
d1f3e7eac84cdd3929aaedecc9f9b449
  server ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <S(LLLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.server1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
575f5f30e2edc1acd63c1d1e2b38dafe
  server1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <S(LLLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (7, True, False)
                (\ (sock :: Network.Socket.Types.Socket)
                   (killSwitch :: GHC.MVar.MVar ())
                   (host :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (forum :: Main.Forum)
                   (gen :: Main.IDGenerator)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case sock of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wlisten
                        ww1
                        ww7
                        Main.server3
                        eta of ds1 { (#,#) ipv ipv1 ->
                 Main.server2 ww killSwitch host port forum gen ipv } } }) -}
f9ba46c72b57061030ffed0c099f172a
  server2 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.MVar.MVar ())
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Base.String)
                   (w4 :: Main.Forum)
                   (w5 :: Main.IDGenerator)
                   (w6 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wserverLoop ww1 ww2 ww3 ww4 ww7 w1 w2 w3 w4 w5 w6 } }) -}
d6279134d090a19931e3f0b0d177e655
  server3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
6b2bface84e6c72801fb0ac84f1c38a4
  serverLoop ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.server2
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
397f6abfeefc13130b19f86c013f0dc9
  startswith :: GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
instance GHC.Classes.Eq [Main.Chatroom] = Main.$fEqChatroom
instance GHC.Classes.Eq [Main.Client] = Main.$fEqClient
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

