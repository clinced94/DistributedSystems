
==================== FINAL INTERFACE ====================
2016-11-20 21:10:06.373262 UTC

interface main@main:Main 8001
  interface hash: 9f85c6adb198655f45289e754ab727d4
  ABI hash: 93348e67720343ffb0e4f3728e021e79
  export-list hash: 905d987de4a7e5ce7a798ea34499870d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8668484c2415d15fbda37e3f0d670903
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.addClient
  Main.clientResponse
  Main.createChatroom
  Main.decSocketCount
  Main.endThread
  Main.enterChatroom
  Main.getChatroom
  Main.getClientID
  Main.getClientIP
  Main.getClientName
  Main.getClientPort
  Main.getMesgInfo
  Main.getNewId
  Main.getRoomClients
  Main.getRoomId
  Main.getRoomName
  Main.handleMessage
  Main.incSocketCount
  Main.initChatrooms
  Main.initForum
  Main.initSocket
  Main.insertChatroom
  Main.isRoomEmpty
  Main.main
  Main.newIdGenerator
  Main.printAllChatrooms
  Main.receiveMessage
  Main.removeClient
  Main.sendResponse
  Main.server
  Main.serverLoop
  Main.startswith
  Main.Chatroom{Main.Chatroom}
  Main.Client{Main.Client}
  Main.Forum
  Main.ID
  Main.IDGenerator
  Main.IP
  Main.Name
  Main.Port
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Control.Applicative 7728b33d6969dce59e89474349eb1397
import  -/  base-4.9.0.0:Control.Concurrent 98a3a12a2ace3d27758947d9f1041f90
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Bool fdecca24596e58d69d3776148d262f25
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.List 49b86831b79b49ce5d4d9416ecba61df
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:Data.OldList 0058409f994fb13ae0616e3f1e5b4dae
import  -/  base-4.9.0.0:Data.String 69bb34ee5f2f4d95a41479e62b8fdc61
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.Conc.Sync 800ad52ae188c67fd514a07ba8a64fcc
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.MVar 5a1706a0bf7a7186672dad8d28229b31
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Environment ee0914a962f5508d0fd404c89ee4999b
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 6aef0058c6bf280aaddfe6ef70d5f28b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket 16daba302e6d1376ace8d6bc8354708f
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.ByteString 0651e1723028c296375d19eb3a5afe69
import  -/  network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket.Types c045bc4119b787ed28c457fa81ec4a37
c07c5f6dfea023321a89faf7a83caa45
  $fEqChatroom :: GHC.Classes.Eq Main.Chatroom
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Chatroom Main.$fEqChatroom_$c== Main.$fEqChatroom_$c/= -}
c07c5f6dfea023321a89faf7a83caa45
  $fEqChatroom_$c/= ::
    Main.Chatroom -> Main.Chatroom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Chatroom) (b :: Main.Chatroom) ->
                 case Main.$fEqChatroom_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c07c5f6dfea023321a89faf7a83caa45
  $fEqChatroom_$c== ::
    Main.Chatroom -> Main.Chatroom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Chatroom) (w1 :: Main.Chatroom) ->
                 case w of ww { Main.Chatroom ww1 ww2 ww3 ->
                 case w1 of ww4 { Main.Chatroom ww5 ww6 ww7 ->
                 Main.$w$c== ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
14898b8d7f42e9d2382a3f18266a29ba
  $fEqClient :: GHC.Classes.Eq Main.Client
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Client Main.$fEqClient_$c== Main.$fEqClient_$c/= -}
14898b8d7f42e9d2382a3f18266a29ba
  $fEqClient_$c/= :: Main.Client -> Main.Client -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U(U))><S(SLLL),1*U(1*U,1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Client) (b :: Main.Client) ->
                 case Main.$fEqClient_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
14898b8d7f42e9d2382a3f18266a29ba
  $fEqClient_$c== :: Main.Client -> Main.Client -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U,1*U,1*U,1*U(U))><S(SLLL),1*U(1*U,1*U,1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Client) (w1 :: Main.Client) ->
                 case w of ww { Main.Client ww1 ww2 ww3 ww4 ->
                 case w1 of ww5 { Main.Client ww6 ww7 ww8 ww9 ->
                 Main.$w$c==1 ww1 ww2 ww3 ww4 ww6 ww7 ww8 ww9 } }) -}
e6b2067888617f9198ceed4027d11ad3
  $tc'Chatroom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17087822669908215985##
                   562869871650124454##
                   Main.$trModule
                   Main.$tc'Chatroom1) -}
debd9fb9c0c1d15e880f7bda7c6dec66
  $tc'Chatroom1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Chatroom"#) -}
e62d791731323355b04c005ddd44e49e
  $tc'Client :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14317905627767584460##
                   8020356174247805466##
                   Main.$trModule
                   Main.$tc'Client1) -}
1e31cdcbef3d5a45efde6decabdcaefc
  $tc'Client1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Client"#) -}
e82f775f3735c5d968e088499db2465e
  $tcChatroom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9706153233630221117##
                   1865358357504204911##
                   Main.$trModule
                   Main.$tcChatroom1) -}
537933bca6f75e29999f47a72ba4594d
  $tcChatroom1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Chatroom"#) -}
824c8b6e5d1e111a64ffa02e17dfa0f0
  $tcClient :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2041806266336690928##
                   6211083142683335045##
                   Main.$trModule
                   Main.$tcClient1) -}
f6308ac30128598c150371405caec582
  $tcClient1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Client"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
257e58f050e087f1e3286dbc52b2ef44
  $w$c== ::
    Main.Name
    -> [Main.Client]
    -> Main.ID
    -> Main.Name
    -> [Main.Client]
    -> Main.ID
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U(U)><S,1*U><L,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Main.Name)
                   (ww1 :: [Main.Client])
                   (ww2 :: Main.ID)
                   (ww3 :: Main.Name)
                   (ww4 :: [Main.Client])
                   (ww5 :: Main.ID) ->
                 case GHC.Base.eqString ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Main.Client
                             Main.$fEqClient
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.eqInt ww2 ww5 } }) -}
6d624f1ac4d75660ceb08a583cdc00a4
  $w$c==1 ::
    Main.IP
    -> Main.Port
    -> Main.Name
    -> Main.ID
    -> Main.IP
    -> Main.Port
    -> Main.Name
    -> Main.ID
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U(U)><S,1*U><L,1*U><L,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Main.IP)
                   (ww1 :: Main.Port)
                   (ww2 :: Main.Name)
                   (ww3 :: Main.ID)
                   (ww4 :: Main.IP)
                   (ww5 :: Main.Port)
                   (ww6 :: Main.Name)
                   (ww7 :: Main.ID) ->
                 case GHC.Base.eqString ww ww4 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Base.eqString ww1 ww5 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Base.eqString ww2 ww6 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt ww3 ww7 } } }) -}
e2d050a2dff675c53acb7cc5e44b7379
  $wcreateChatroom ::
    Main.Name
    -> GHC.Prim.MVar# GHC.Prim.RealWorld Main.ID
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.MVar.MVar Main.Chatroom #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Name)
                   (ww :: GHC.Prim.MVar# GHC.Prim.RealWorld Main.ID)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        ww
                        (case ipv1 of wild { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1#) })
                        ipv of s2# { DEFAULT ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        s2# of ds { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        ipv3
                        (Main.Chatroom w (GHC.Types.[] @ Main.Client) ipv1)
                        ipv2 of s2#1 { DEFAULT ->
                 (# s2#1, GHC.MVar.MVar @ Main.Chatroom ipv3 #) } } } }) -}
9c0a16cd7e413887d57aba6b9390bd13
  $wremoveClient ::
    Main.Client
    -> GHC.Prim.MVar# GHC.Prim.RealWorld Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Client)
                   (ww :: GHC.Prim.MVar# GHC.Prim.RealWorld Main.Chatroom)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        ww
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Main.Chatroom name clients rmId ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        ww
                        (Main.Chatroom
                           name
                           (Data.OldList.\\
                              @ Main.Client
                              Main.$fEqClient
                              clients
                              (GHC.Types.: @ Main.Client w (GHC.Types.[] @ Main.Client)))
                           rmId)
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
c38bf0eae01d7b1b504ea0606d7fff64
  $wserverLoop ::
    Foreign.C.Types.CInt
    -> Network.Socket.Types.Family
    -> Network.Socket.Types.SocketType
    -> Network.Socket.Types.ProtocolNumber
    -> GHC.Prim.MVar#
         GHC.Prim.RealWorld Network.Socket.Types.SocketStatus
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 11,
     Strictness: <L,U(U)><S,U><L,U><L,U(U)><S,U><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Inline: [0] -}
a7fcd793b8606cac7211ca5df5b1d36e
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
f8aeca30cc0323802397450d786aa3a7
  $wunsafeDrop1 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
c07c5f6dfea023321a89faf7a83caa45
  data Chatroom = Chatroom Main.Name [Main.Client] Main.ID
14898b8d7f42e9d2382a3f18266a29ba
  data Client = Client Main.IP Main.Port Main.Name Main.ID
309ec81aba768aa21c5c69fa0b5a15d4
  type Forum = GHC.MVar.MVar [GHC.MVar.MVar Main.Chatroom]
d06a83fac3980621c102c8d41a948683
  type ID = GHC.Types.Int
2f43c89c8c1f541029488f60a6bab3a9
  type IDGenerator = GHC.MVar.MVar Main.ID
c297ec72918f624e92baa0ea9e9bbb16
  type IP = GHC.Base.String
29b1c2467858e581962a498c6425c7cd
  type Name = GHC.Base.String
fc0d8b1c33010e75f44c76a1ba60f601
  type Port = GHC.Base.String
d86130dd813d568b70ccb1903ed8f79b
  addClient ::
    Main.Client -> GHC.MVar.MVar Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.addClient1
                  `cast`
                (<Main.Client>_R
                 ->_R <GHC.MVar.MVar Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
083ff2b44dd34723bff9471b8d7643e5
  addClient1 ::
    Main.Client
    -> GHC.MVar.MVar Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (client :: Main.Client)
                   (room :: GHC.MVar.MVar Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case room of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild1 { Main.Chatroom name clients rmId ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Chatroom
                        mvar#
                        (Main.Chatroom
                           name
                           (GHC.Base.augment
                              @ Main.Client
                              (\ @ b (c :: Main.Client -> b -> b)[OneShot] (n :: b)[OneShot] ->
                               GHC.Base.foldr @ Main.Client @ b c n clients)
                              (GHC.Types.: @ Main.Client client (GHC.Types.[] @ Main.Client)))
                           rmId)
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } } }) -}
c424c4e33d856ebbcbe45e7dcd5737d9
  clientResponse ::
    Main.Client
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <L,1*U(A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U(1*U,A,1*U(U))>,
     Unfolding: (\ (c :: Main.Client)
                   (serverIP :: GHC.Base.String)
                   (serverPort :: GHC.Base.String)
                   (chatroom :: Main.Chatroom) ->
                 GHC.CString.unpackAppendCString#
                   "JOINED_CHATROOM: "#
                   (case chatroom of wild { Main.Chatroom name ds ds1 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      name
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \SERVER_IP: "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            serverIP
                            (GHC.CString.unpackAppendCString#
                               "\n\
                               \PORT: "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  serverPort
                                  (GHC.CString.unpackAppendCString#
                                     "\n\
                                     \ROOM_REF: "#
                                     (case ds1 of ww2 { GHC.Types.I# ww3 ->
                                      case GHC.Show.$wshowSignedInt
                                             0#
                                             ww3
                                             (GHC.Types.[]
                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                      GHC.Base.++
                                        @ GHC.Types.Char
                                        (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                        (GHC.CString.unpackAppendCString#
                                           "\n\
                                           \JOIN_ID: "#
                                           (case c of wild1 { Main.Client ds2 ds3 ds4 cId ->
                                            case cId of ww1 { GHC.Types.I# ww8 ->
                                            case GHC.Show.$wshowSignedInt
                                                   0#
                                                   ww8
                                                   (GHC.Types.[]
                                                      @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                                            GHC.Base.++
                                              @ GHC.Types.Char
                                              (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                                              Main.clientResponse1 } } })) } })))))) })) -}
7189036e8e5793c22c07e5a5c09af96f
  clientResponse1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \\n"#) -}
2396d324c118c19a0ce9568dfad6e468
  createChatroom ::
    Main.Name
    -> Main.IDGenerator -> GHC.Types.IO (GHC.MVar.MVar Main.Chatroom)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.createChatroom1
                  `cast`
                (<Main.Name>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.MVar.MVar Main.Chatroom>_R)) -}
b597c8686808092b5972e4f4f0810a3c
  createChatroom1 ::
    Main.Name
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.MVar.MVar Main.Chatroom #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Name)
                   (w1 :: Main.IDGenerator)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { GHC.MVar.MVar ww1 ->
                 Main.$wcreateChatroom w ww1 w2 }) -}
6e1df4bbcca6b81acfabdfdca0921b72
  decSocketCount :: GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.decSocketCount1
                  `cast`
                (<GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
2afc240a36e2cf41c0e3418a0cc0ce5d
  decSocketCount1 ::
    GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case count of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        (case ipv1 of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.-# x 1#) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
51310d4707100546f95ac4e3b2584c27
  endThread ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.endThread1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
bc9f07f4dbe903ba97758483b044d57a
  endThread1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S(LLLLS(S)),1*U(U(U),A,A,A,1*U(U))><L,1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (s :: Network.Socket.Types.Socket)
                   (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wclose ww1 ww7 eta of ds1 { (#,#) ipv ipv1 ->
                 Main.endThread2 count ipv } } }) -}
d81a3b485388a13443a60124728f102e
  endThread2 ::
    GHC.MVar.MVar GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (count :: GHC.MVar.MVar GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case count of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        mvar#
                        (case ipv1 of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1#) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
0e88ea7617b4d167b080386940815c6e
  enterChatroom ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 8,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.enterChatroom1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
629d9642fbb5fd004221f9b37a4148ec
  enterChatroom1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U> -}
889da788b40d8ac5a441944cff4c6ed5
  getChatroom ::
    Main.Name
    -> [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Types.IO (GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom))
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getChatroom1
                  `cast`
                (<Main.Name>_R
                 ->_R <[GHC.MVar.MVar Main.Chatroom]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom)>_R)) -}
7dcb0c79446619553549a702e86f4b55
  getChatroom1 ::
    Main.Name
    -> [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe (GHC.MVar.MVar Main.Chatroom) #)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U> -}
5fe7643d5bdcfcd95c57a69288472a7d
  getClientID :: Main.Client -> Main.ID
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 ds3 cId -> cId }) -}
8f8a0a8a82a4b91f89f6fad05eee6654
  getClientIP :: Main.Client -> Main.IP
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ip ds1 ds2 ds3 -> ip }) -}
1bd657eb3aa88d87a9cb233a2a954cbd
  getClientName :: Main.Client -> Main.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 ds2 name ds3 -> name }) -}
f7e5ba3fabade5c13d40fbce03788b9b
  getClientPort :: Main.Client -> Main.Port
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Client) ->
                 case ds of wild { Main.Client ds1 port ds2 ds3 -> port }) -}
0b7601b7d002810c265bebe5f5e9b6a9
  getMesgInfo ::
    GHC.Base.String -> GHC.Types.IO (GHC.Base.String, GHC.Base.String)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getMesgInfo1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <([GHC.Types.Char], [GHC.Types.Char])>_R)) -}
5e83195522405acdf21e130f4191ebcc
  getMesgInfo1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([GHC.Types.Char], [GHC.Types.Char]) #)
  {- Arity: 2, Strictness: <L,1*U><S,U>,
     Unfolding: (\ (msg :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta,
                    let {
                      mgsLines :: [GHC.Base.String] = Data.OldList.lines msg
                    } in
                    (Main.$wunsafeDrop1
                       @ GHC.Types.Char
                       15#
                       (GHC.List.$w!! @ GHC.Base.String mgsLines 0#),
                     Main.$wunsafeDrop
                       @ GHC.Types.Char
                       13#
                       (GHC.List.$w!! @ GHC.Base.String mgsLines 3#)) #)) -}
911593ead5bac3ca68c7beeb8ea5a535
  getNewId :: Main.IDGenerator -> GHC.Types.IO Main.ID
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getNewId1
                  `cast`
                (<Main.IDGenerator>_R ->_R Sym (GHC.Types.N:IO[0] <Main.ID>_R)) -}
faca49b74168057a42e557e673792e23
  getNewId1 ::
    Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.ID #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (gen :: Main.IDGenerator)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case gen of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        mvar#
                        (case ipv1 of wild1 { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x 1#) })
                        ipv of s2# { DEFAULT ->
                 (# s2#, ipv1 #) } } }) -}
9b3c2292cb7e9487ea1c55aa2f01baa9
  getRoomClients :: Main.Chatroom -> [Main.Client]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom ds1 clients ds2 -> clients }) -}
85cd0c9db1ad67cd2c8d838f1e30ba3a
  getRoomId :: Main.Chatroom -> Main.ID
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom ds1 ds2 rmId -> rmId }) -}
6bd42ea1818cf774dbdb22d734fc9206
  getRoomName :: Main.Chatroom -> Main.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom name ds1 ds2 -> name }) -}
65699ced2d31d4f816a08593d3fd5db9
  handleMessage ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 9,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,U><L,1*U(U)><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.handleMessage1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
c8c3dac75b7520f5255ab9a83f2808eb
  handleMessage1 ::
    Network.Socket.Types.Socket
    -> GHC.Base.String
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,U><L,1*U(U)><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: (\ (s :: Network.Socket.Types.Socket)
                   (msg :: GHC.Base.String)
                   (killSwitch :: GHC.MVar.MVar ())
                   (host :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (clientInfo :: GHC.Base.String)
                   (forum :: Main.Forum)
                   (gen :: Main.IDGenerator)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.startswith Main.handleMessage9 msg of wild {
                   GHC.Types.False
                   -> case Main.startswith Main.handleMessage8 msg of wild1 {
                        GHC.Types.False
                        -> case Main.startswith Main.handleMessage7 msg of wild2 {
                             GHC.Types.False
                             -> case GHC.IO.Handle.Text.hPutStr2
                                       GHC.IO.Handle.FD.stdout
                                       Main.handleMessage6
                                       GHC.Types.True
                                       eta of ds1 { (#,#) ipv ipv1 ->
                                (# ipv, GHC.Tuple.() #) }
                             GHC.Types.True
                             -> case GHC.IO.Handle.Text.hPutStr2
                                       GHC.IO.Handle.FD.stdout
                                       Main.handleMessage5
                                       GHC.Types.True
                                       eta of ds1 { (#,#) ipv ipv1 ->
                                case killSwitch of wild3 { GHC.MVar.MVar mvar# ->
                                case GHC.Prim.putMVar#
                                       @ GHC.Prim.RealWorld
                                       @ ()
                                       mvar#
                                       GHC.Tuple.()
                                       ipv of s2# { DEFAULT ->
                                (# s2#, GHC.Tuple.() #) } } } }
                        GHC.Types.True
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.handleMessage4
                                  GHC.Types.True
                                  eta of ds1 { (#,#) ipv ipv1 ->
                           case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                           let {
                             cs :: [GHC.Types.Char]
                             = GHC.Base.++
                                 @ GHC.Types.Char
                                 msg
                                 (GHC.CString.unpackAppendCString#
                                    "IP:"#
                                    (GHC.Base.++
                                       @ GHC.Types.Char
                                       host
                                       (GHC.CString.unpackAppendCString#
                                          "\n\
                                          \Port:"#
                                          (GHC.Base.++ @ GHC.Types.Char port Main.handleMessage3))))
                           } in
                           case GHC.List.$wlenAcc @ GHC.Types.Char cs 0# of ww7 { DEFAULT ->
                           case Data.ByteString.Internal.$wunsafePackLenChars
                                  ww7
                                  cs of ww6 { Data.ByteString.Internal.PS ww8 ww9 ww10 ww11 ->
                           case Network.Socket.ByteString.$wsend
                                  ww1
                                  ww8
                                  ww9
                                  ww10
                                  ww11
                                  ipv of ds2 { (#,#) ipv2 ipv3 ->
                           case GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout
                                  Main.handleMessage2
                                  GHC.Types.True
                                  ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                           (# ipv4, GHC.Tuple.() #) } } } } } } }
                   GHC.Types.True
                   -> Main.enterChatroom1
                        s
                        msg
                        host
                        port
                        clientInfo
                        forum
                        gen
                        eta }) -}
b90349ae26acea32f9ee36dcbdacc8f2
  handleMessage2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Response sent"#) -}
cdac38d8e7b6cb7216c9924ddaade491
  handleMessage3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "\n\
                   \StudentID:13320590\n"#) -}
48dc564a817ddd4d899b1be9aefd9e7b
  handleMessage4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Dealing with message"#) -}
9e1833cb9dca9244721c0a365aab0660
  handleMessage5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Killswitch Active"#) -}
412a6bb68cde66efc54cf5d349a7719b
  handleMessage6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Nothing is being done"#) -}
3a0938a77b815d17c4249b7451b9371d
  handleMessage7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "KILL_SERVICE"#) -}
5d408ca5d5d9ca9ba88f997427a2a741
  handleMessage8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "HELO"#) -}
dd35bed34fa61db2411efe8aa4cc4157
  handleMessage9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "JOIN_CHATROOM"#) -}
d860625c301cb2ce4881c65821fb5c90
  incSocketCount :: GHC.MVar.MVar GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.endThread2
                  `cast`
                (<GHC.MVar.MVar GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
fe508808f5d8056ecf7409810c5bf434
  initChatrooms :: GHC.Types.IO [GHC.MVar.MVar Main.Chatroom]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.initChatrooms1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.MVar.MVar Main.Chatroom]>_R)) -}
c9ec02651fd89fa12164424c46ada71f
  initChatrooms1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [GHC.MVar.MVar Main.Chatroom] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, GHC.Types.[] @ (GHC.MVar.MVar Main.Chatroom) #)) -}
38404fb89230b0878688488ad9894c66
  initForum :: GHC.Types.IO Main.Forum
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.initForum1 `cast` (Sym (GHC.Types.N:IO[0] <Main.Forum>_R)) -}
feee686cb5d8cbe2b0500e3805869606
  initForum1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Forum #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        s of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        ipv1
                        (GHC.Types.[] @ (GHC.MVar.MVar Main.Chatroom))
                        ipv of s2# { DEFAULT ->
                 (# s2#,
                    GHC.MVar.MVar @ [GHC.MVar.MVar Main.Chatroom] ipv1 #) } }) -}
a3389e5741ab8ad1cd0004fa52880a4a
  initSocket ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Types.IO Network.Socket.Types.Socket
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.initSocket1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Network.Socket.Types.Socket>_R)) -}
c046a15aeb2f16ed88b93f24478ec005
  initSocket1 ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Network.Socket.Types.Socket #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (host :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.$wsocket
                        Network.Socket.Types.AF_INET
                        Network.Socket.Types.Stream
                        0#
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case Network.Socket.getSocketOption3
                        Network.Socket.setSocketOption2
                        Network.Socket.ReuseAddr
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) level opt ->
                 case GHC.Prim.newAlignedPinnedByteArray#
                        @ GHC.Prim.RealWorld
                        4#
                        4#
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.Prim.unsafeFreezeByteArray#
                        @ GHC.Prim.RealWorld
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 let {
                   ptr :: GHC.Prim.Addr# = GHC.Prim.byteArrayContents# ipv7
                 } in
                 case GHC.Prim.writeInt32OffAddr#
                        @ GHC.Prim.RealWorld
                        ptr
                        0#
                        1#
                        ipv6 of s2 { DEFAULT ->
                 case ww1
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds { GHC.Int.I32# ds5 ->
                 case level
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds6 { GHC.Int.I32# ds7 ->
                 case opt
                        `cast`
                      (Foreign.C.Types.N:CInt[0]) of ds8 { GHC.Int.I32# ds9 ->
                 case {__pkg_ccall network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG setsockopt GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.Addr#
                                                                                                     -> GHC.Prim.Int#
                                                                                                     -> GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld
                                                                                                     -> (# GHC.Prim.State#
                                                                                                             GHC.Prim.RealWorld,
                                                                                                           GHC.Prim.Int# #)}
                        ds5
                        ds7
                        ds9
                        ptr
                        4#
                        s2 of wild2 { (#,#) ds10 ds11 ->
                 let {
                   $w$j :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Network.Socket.Types.Socket #)
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case Network.Socket.getAddrInfo1
                            (GHC.Base.Nothing @ Network.Socket.AddrInfo)
                            (GHC.Base.Just @ GHC.Base.String host)
                            (GHC.Base.Just @ GHC.Base.String port)
                            w of ds12 { (#,#) ipv8 ipv9 ->
                     case ipv9 of wild1 {
                       []
                       -> GHC.IO.failIO1
                            @ Network.Socket.Types.Socket
                            Main.initSocket2
                            ipv8
                       : addr ds13
                       -> case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                          case Network.Socket.$wbind
                                 ds `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                                 ww7
                                 (Network.Socket.addrAddress addr)
                                 ipv8 of ds14 { (#,#) ipv10 ipv11 ->
                          (# ipv10, ww #) } } } }
                 } in
                 case GHC.Prim.narrow32Int# ds11 of wild3 {
                   DEFAULT
                   -> case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ds10 of s4 { DEFAULT ->
                      $w$j s4 }
                   -1#
                   -> case Foreign.C.Error.throwErrno1
                             @ Foreign.C.Types.CInt
                             Network.Socket.setSocketOption2
                             ds10 of ds12 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.touch#
                             @ 'GHC.Types.PtrRepUnlifted
                             @ GHC.Prim.ByteArray#
                             ipv7
                             ipv8 of s4 { DEFAULT ->
                      $w$j s4 } } } } } } } } } } } } } }) -}
d925b6a9e43434b2029904b37c3a007e
  initSocket2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Pattern match failure in do expression at src/Main.hs:135:9-14"#) -}
d4cad10946dd7a82b6a4640b57ad4862
  insertChatroom ::
    Main.Forum -> GHC.MVar.MVar Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.insertChatroom1
                  `cast`
                (<Main.Forum>_R
                 ->_R <GHC.MVar.MVar Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
821657409dfb57d18559b070dcc7d92e
  insertChatroom1 ::
    Main.Forum
    -> GHC.MVar.MVar Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (forum :: Main.Forum)
                   (newRm :: GHC.MVar.MVar Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case forum of wild { GHC.MVar.MVar mvar# ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        mvar#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ [GHC.MVar.MVar Main.Chatroom]
                        mvar#
                        (GHC.Base.augment
                           @ (GHC.MVar.MVar Main.Chatroom)
                           (\ @ b
                              (c :: GHC.MVar.MVar Main.Chatroom -> b -> b)[OneShot]
                              (n :: b)[OneShot] ->
                            GHC.Base.foldr @ (GHC.MVar.MVar Main.Chatroom) @ b c n ipv1)
                           (GHC.Types.:
                              @ (GHC.MVar.MVar Main.Chatroom)
                              newRm
                              (GHC.Types.[] @ (GHC.MVar.MVar Main.Chatroom))))
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } }) -}
c42a02b93ff70db58cd6a80b8b549225
  isRoomEmpty :: Main.Chatroom -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Chatroom) ->
                 case ds of wild { Main.Chatroom ds1 clients ds2 ->
                 GHC.List.null @ Main.Client clients }) -}
d9c0dee8a685c5ed422401aaa63f23bf
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
01d62c2c484918d4b5d94b688c90c90e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
b08d228f4059532a99441778635cdde9
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
3da13b3996d7cc26b35c301c6c216431
  newIdGenerator :: GHC.Types.IO (GHC.MVar.MVar Main.ID)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.newIdGenerator1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.MVar.MVar Main.ID>_R)) -}
05c181600a682b5c441691273cbc350e
  newIdGenerator1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.MVar.MVar Main.ID #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        eta of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ID
                        ipv1
                        Main.newIdGenerator2
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.MVar.MVar @ Main.ID ipv1 #) } }) -}
877bb869ec05fb19b31afc5c35b8065d
  newIdGenerator2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8a0596eb372934956f695d28f7e8445c
  printAllChatrooms ::
    [GHC.MVar.MVar Main.Chatroom] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.printAllChatrooms1
                  `cast`
                (<[GHC.MVar.MVar Main.Chatroom]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e6e9d22883e66fcd0ecfb1e883b87cd7
  printAllChatrooms1 ::
    [GHC.MVar.MVar Main.Chatroom]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
f71ed9396bd1acf632a5cead6d984cd2
  receiveMessage ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 8,
     Strictness: <L,U(U(U),A,A,A,A)><L,1*U(U)><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.receiveMessage1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
fa24d32034c5f651f6ff35f5b61dc7c8
  receiveMessage1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U(U(U),A,A,A,A)><L,1*U(U)><L,1*U><L,1*U><L,U><L,1*U(U)><L,1*U(U)><S,U>,
     Unfolding: (\ (sock :: Network.Socket.Types.Socket)
                   (killSwitch :: GHC.MVar.MVar ())
                   (host :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (clientInfo :: GHC.Base.String)
                   (forum :: Main.Forum)
                   (gen :: Main.IDGenerator)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Network.Socket.ByteString.$wrecv
                        sock
                        4096#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           "Message: "#
                           (case ipv1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                            Data.ByteString.Internal.$wunpackAppendCharsLazy
                              ww1
                              ww2
                              ww3
                              ww4
                              (GHC.Types.[] @ GHC.Types.Char) }))
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Main.handleMessage1
                   sock
                   (Data.ByteString.Internal.unpackChars ipv1)
                   killSwitch
                   host
                   port
                   clientInfo
                   forum
                   gen
                   ipv2 } }) -}
10b122ae8deb8464b408d19b2f424c03
  removeClient ::
    Main.Client -> GHC.MVar.MVar Main.Chatroom -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.removeClient1
                  `cast`
                (<Main.Client>_R
                 ->_R <GHC.MVar.MVar Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
6525f69602e0eda6498c967c401d0c75
  removeClient1 ::
    Main.Client
    -> GHC.MVar.MVar Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Client)
                   (w1 :: GHC.MVar.MVar Main.Chatroom)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w1 of ww { GHC.MVar.MVar ww1 ->
                 Main.$wremoveClient w ww1 w2 }) -}
4d3473cb2b3858d1ec5ddcd70539aa22
  sendResponse ::
    Network.Socket.Types.Socket
    -> Main.Client
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U(A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U(1*U,A,1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sendResponse1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <Main.Client>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Chatroom>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7f3edcdafefa65389fd84935d9541cfc
  sendResponse1 ::
    Network.Socket.Types.Socket
    -> Main.Client
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Chatroom
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,1*U(U(U),A,A,A,A)><L,1*U(A,A,A,1*U(U))><L,1*U><L,1*U><L,1*U(1*U,A,1*U(U))><S,U>,
     Unfolding: (\ (s :: Network.Socket.Types.Socket)
                   (c :: Main.Client)
                   (serverIP :: GHC.Base.String)
                   (serverPort :: GHC.Base.String)
                   (chatroom :: Main.Chatroom)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   responseMsg :: GHC.Base.String
                   = Main.clientResponse c serverIP serverPort chatroom
                 } in
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString# "Response: \n"# responseMsg)
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case s of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        responseMsg
                        0# of ww7 { DEFAULT ->
                 case Data.ByteString.Internal.$wunsafePackLenChars
                        ww7
                        responseMsg of ww6 { Data.ByteString.Internal.PS ww8 ww9 ww10 ww11 ->
                 case Network.Socket.ByteString.$wsend
                        ww1
                        ww8
                        ww9
                        ww10
                        ww11
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, GHC.Tuple.() #) } } } } }) -}
f542050bb609a5b9c84c217ac812b612
  server ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <S(LLLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.server1
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
cfced657bcd85fc753232eba3cd969dc
  server1 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <S(LLLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (7, True, False)
                (\ (sock :: Network.Socket.Types.Socket)
                   (killSwitch :: GHC.MVar.MVar ())
                   (host :: GHC.Base.String)
                   (port :: GHC.Base.String)
                   (forum :: Main.Forum)
                   (gen :: Main.IDGenerator)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case sock of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 case Network.Socket.$wlisten
                        ww1
                        ww7
                        Main.server3
                        eta of ds1 { (#,#) ipv ipv1 ->
                 Main.server2 ww killSwitch host port forum gen ipv } } }) -}
8aaf276d3ea84ff537d05f62ae67a90b
  server2 ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ (w :: Network.Socket.Types.Socket)
                   (w1 :: GHC.MVar.MVar ())
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Base.String)
                   (w4 :: Main.Forum)
                   (w5 :: Main.IDGenerator)
                   (w6 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Network.Socket.Types.MkSocket ww1 ww2 ww3 ww4 ww5 ->
                 case ww5 of ww6 { GHC.MVar.MVar ww7 ->
                 Main.$wserverLoop ww1 ww2 ww3 ww4 ww7 w1 w2 w3 w4 w5 w6 } }) -}
d6279134d090a19931e3f0b0d177e655
  server3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
e36f24041e8ca3663d2143b4649a5705
  serverLoop ::
    Network.Socket.Types.Socket
    -> GHC.MVar.MVar ()
    -> GHC.Base.String
    -> GHC.Base.String
    -> Main.Forum
    -> Main.IDGenerator
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <S(LSLLS(S)),1*U(U(U),U,U,U(U),U(U))><L,U(U)><L,U><L,U><L,U(U)><L,U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.server2
                  `cast`
                (<Network.Socket.Types.Socket>_R
                 ->_R <GHC.MVar.MVar ()>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Forum>_R
                 ->_R <Main.IDGenerator>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
397f6abfeefc13130b19f86c013f0dc9
  startswith :: GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
instance GHC.Classes.Eq [Main.Chatroom] = Main.$fEqChatroom
instance GHC.Classes.Eq [Main.Client] = Main.$fEqClient
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

